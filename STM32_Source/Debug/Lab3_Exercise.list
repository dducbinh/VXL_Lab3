
Lab3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002718  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002848  08002848  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002848  08002848  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002848  08002848  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000020  08002870  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002870  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092e4  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b48  00000000  00000000  0002932d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002ae78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ac9  00000000  00000000  0002c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c737  00000000  00000000  00042c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008243c  00000000  00000000  0004f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d17ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027fc  00000000  00000000  000d1840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	0800280c 	.word	0x0800280c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	0800280c 	.word	0x0800280c

0800014c <display7SEG>:

int firstSEG;
int secondSEG;
int mode;

static void display7SEG(int number) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	d870      	bhi.n	800023c <display7SEG+0xf0>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <display7SEG+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000189 	.word	0x08000189
 8000164:	0800019b 	.word	0x0800019b
 8000168:	080001ad 	.word	0x080001ad
 800016c:	080001bf 	.word	0x080001bf
 8000170:	080001d1 	.word	0x080001d1
 8000174:	080001e3 	.word	0x080001e3
 8000178:	080001f5 	.word	0x080001f5
 800017c:	08000207 	.word	0x08000207
 8000180:	08000219 	.word	0x08000219
 8000184:	0800022b 	.word	0x0800022b
	switch (number) {
	case 0:
		GPIOA->ODR = (GPIOA->ODR & 0xFFFFFF01) | 0b10000000; // GFEDCBA except bit 0
 8000188:	4b2f      	ldr	r3, [pc, #188]	; (8000248 <display7SEG+0xfc>)
 800018a:	68db      	ldr	r3, [r3, #12]
 800018c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8000190:	4a2d      	ldr	r2, [pc, #180]	; (8000248 <display7SEG+0xfc>)
 8000192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000196:	60d3      	str	r3, [r2, #12]
		break;
 8000198:	e051      	b.n	800023e <display7SEG+0xf2>
	case 1:
		GPIOA->ODR = (GPIOA->ODR & 0xFFFFFF01) | 0b11110011; // GFEDCBA
 800019a:	4b2b      	ldr	r3, [pc, #172]	; (8000248 <display7SEG+0xfc>)
 800019c:	68db      	ldr	r3, [r3, #12]
 800019e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001a2:	4a29      	ldr	r2, [pc, #164]	; (8000248 <display7SEG+0xfc>)
 80001a4:	f043 03f3 	orr.w	r3, r3, #243	; 0xf3
 80001a8:	60d3      	str	r3, [r2, #12]
		break;
 80001aa:	e048      	b.n	800023e <display7SEG+0xf2>
	case 2:
		GPIOA->ODR = (GPIOA->ODR & 0xFFFFFF01) | 0b01001001; // GFEDCBA
 80001ac:	4b26      	ldr	r3, [pc, #152]	; (8000248 <display7SEG+0xfc>)
 80001ae:	68db      	ldr	r3, [r3, #12]
 80001b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001b4:	4a24      	ldr	r2, [pc, #144]	; (8000248 <display7SEG+0xfc>)
 80001b6:	f043 0349 	orr.w	r3, r3, #73	; 0x49
 80001ba:	60d3      	str	r3, [r2, #12]
		break;
 80001bc:	e03f      	b.n	800023e <display7SEG+0xf2>
	case 3:
		GPIOA->ODR = (GPIOA->ODR & 0xFFFFFF01) | 0b01100001; // GFEDCBA
 80001be:	4b22      	ldr	r3, [pc, #136]	; (8000248 <display7SEG+0xfc>)
 80001c0:	68db      	ldr	r3, [r3, #12]
 80001c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001c6:	4a20      	ldr	r2, [pc, #128]	; (8000248 <display7SEG+0xfc>)
 80001c8:	f043 0361 	orr.w	r3, r3, #97	; 0x61
 80001cc:	60d3      	str	r3, [r2, #12]
		break;
 80001ce:	e036      	b.n	800023e <display7SEG+0xf2>
	case 4:
		GPIOA->ODR = (GPIOA->ODR & 0xFFFFFF01) | 0b00110011; // GFEDCBA
 80001d0:	4b1d      	ldr	r3, [pc, #116]	; (8000248 <display7SEG+0xfc>)
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001d8:	4a1b      	ldr	r2, [pc, #108]	; (8000248 <display7SEG+0xfc>)
 80001da:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 80001de:	60d3      	str	r3, [r2, #12]
		break;
 80001e0:	e02d      	b.n	800023e <display7SEG+0xf2>
	case 5:
		GPIOA->ODR = (GPIOA->ODR & 0xFFFFFF01) | 0b00100101; // GFEDCBA
 80001e2:	4b19      	ldr	r3, [pc, #100]	; (8000248 <display7SEG+0xfc>)
 80001e4:	68db      	ldr	r3, [r3, #12]
 80001e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001ea:	4a17      	ldr	r2, [pc, #92]	; (8000248 <display7SEG+0xfc>)
 80001ec:	f043 0325 	orr.w	r3, r3, #37	; 0x25
 80001f0:	60d3      	str	r3, [r2, #12]
		break;
 80001f2:	e024      	b.n	800023e <display7SEG+0xf2>
	case 6:
		GPIOA->ODR = (GPIOA->ODR & 0xFFFFFF01) | 0b00000101; // GFEDCBA
 80001f4:	4b14      	ldr	r3, [pc, #80]	; (8000248 <display7SEG+0xfc>)
 80001f6:	68db      	ldr	r3, [r3, #12]
 80001f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80001fc:	4a12      	ldr	r2, [pc, #72]	; (8000248 <display7SEG+0xfc>)
 80001fe:	f043 0305 	orr.w	r3, r3, #5
 8000202:	60d3      	str	r3, [r2, #12]
		break;
 8000204:	e01b      	b.n	800023e <display7SEG+0xf2>
	case 7:
		GPIOA->ODR = (GPIOA->ODR & 0xFFFFFF01) | 0b11110001; // GFEDCBA
 8000206:	4b10      	ldr	r3, [pc, #64]	; (8000248 <display7SEG+0xfc>)
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800020e:	4a0e      	ldr	r2, [pc, #56]	; (8000248 <display7SEG+0xfc>)
 8000210:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8000214:	60d3      	str	r3, [r2, #12]
		break;
 8000216:	e012      	b.n	800023e <display7SEG+0xf2>
	case 8:
		GPIOA->ODR = (GPIOA->ODR & 0xFFFFFF01) | 0b00000001; // GFEDCBA
 8000218:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <display7SEG+0xfc>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000220:	4a09      	ldr	r2, [pc, #36]	; (8000248 <display7SEG+0xfc>)
 8000222:	f043 0301 	orr.w	r3, r3, #1
 8000226:	60d3      	str	r3, [r2, #12]
		break;
 8000228:	e009      	b.n	800023e <display7SEG+0xf2>
	case 9:
		GPIOA->ODR = (GPIOA->ODR & 0xFFFFFF01) | 0b00100001; // GFEDCBA
 800022a:	4b07      	ldr	r3, [pc, #28]	; (8000248 <display7SEG+0xfc>)
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000232:	4a05      	ldr	r2, [pc, #20]	; (8000248 <display7SEG+0xfc>)
 8000234:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8000238:	60d3      	str	r3, [r2, #12]
		break;
 800023a:	e000      	b.n	800023e <display7SEG+0xf2>
	default:
		break;
 800023c:	bf00      	nop
	}
}
 800023e:	bf00      	nop
 8000240:	370c      	adds	r7, #12
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr
 8000248:	40010800 	.word	0x40010800

0800024c <led7SEGInitState>:

void led7SEGInitState(void) {
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	firstSEG = 0;
 8000250:	4b11      	ldr	r3, [pc, #68]	; (8000298 <led7SEGInitState+0x4c>)
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
	secondSEG = 0;
 8000256:	4b11      	ldr	r3, [pc, #68]	; (800029c <led7SEGInitState+0x50>)
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
	mode = 1;
 800025c:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <led7SEGInitState+0x54>)
 800025e:	2201      	movs	r2, #1
 8000260:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2110      	movs	r1, #16
 8000266:	480f      	ldr	r0, [pc, #60]	; (80002a4 <led7SEGInitState+0x58>)
 8000268:	f001 fad3 	bl	8001812 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	2101      	movs	r1, #1
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <led7SEGInitState+0x58>)
 8000272:	f001 face 	bl	8001812 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	2102      	movs	r1, #2
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <led7SEGInitState+0x58>)
 800027c:	f001 fac9 	bl	8001812 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2104      	movs	r1, #4
 8000284:	4807      	ldr	r0, [pc, #28]	; (80002a4 <led7SEGInitState+0x58>)
 8000286:	f001 fac4 	bl	8001812 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2108      	movs	r1, #8
 800028e:	4805      	ldr	r0, [pc, #20]	; (80002a4 <led7SEGInitState+0x58>)
 8000290:	f001 fabf 	bl	8001812 <HAL_GPIO_WritePin>
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000074 	.word	0x20000074
 800029c:	20000070 	.word	0x20000070
 80002a0:	2000006c 	.word	0x2000006c
 80002a4:	40010c00 	.word	0x40010c00

080002a8 <led7SEGScan>:

void led7SEGScan(void) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	static int scan_idx = 0;

	HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2110      	movs	r1, #16
 80002b0:	4849      	ldr	r0, [pc, #292]	; (80003d8 <led7SEGScan+0x130>)
 80002b2:	f001 faae 	bl	8001812 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2101      	movs	r1, #1
 80002ba:	4847      	ldr	r0, [pc, #284]	; (80003d8 <led7SEGScan+0x130>)
 80002bc:	f001 faa9 	bl	8001812 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2102      	movs	r1, #2
 80002c4:	4844      	ldr	r0, [pc, #272]	; (80003d8 <led7SEGScan+0x130>)
 80002c6:	f001 faa4 	bl	8001812 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2104      	movs	r1, #4
 80002ce:	4842      	ldr	r0, [pc, #264]	; (80003d8 <led7SEGScan+0x130>)
 80002d0:	f001 fa9f 	bl	8001812 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2108      	movs	r1, #8
 80002d8:	483f      	ldr	r0, [pc, #252]	; (80003d8 <led7SEGScan+0x130>)
 80002da:	f001 fa9a 	bl	8001812 <HAL_GPIO_WritePin>

	switch (scan_idx) {
 80002de:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <led7SEGScan+0x134>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	d874      	bhi.n	80003d0 <led7SEGScan+0x128>
 80002e6:	a201      	add	r2, pc, #4	; (adr r2, 80002ec <led7SEGScan+0x44>)
 80002e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ec:	08000301 	.word	0x08000301
 80002f0:	08000329 	.word	0x08000329
 80002f4:	0800035b 	.word	0x0800035b
 80002f8:	08000383 	.word	0x08000383
 80002fc:	080003b5 	.word	0x080003b5
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2101      	movs	r1, #1
 8000304:	4834      	ldr	r0, [pc, #208]	; (80003d8 <led7SEGScan+0x130>)
 8000306:	f001 fa84 	bl	8001812 <HAL_GPIO_WritePin>
		display7SEG(firstSEG / 10);
 800030a:	4b35      	ldr	r3, [pc, #212]	; (80003e0 <led7SEGScan+0x138>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a35      	ldr	r2, [pc, #212]	; (80003e4 <led7SEGScan+0x13c>)
 8000310:	fb82 1203 	smull	r1, r2, r2, r3
 8000314:	1092      	asrs	r2, r2, #2
 8000316:	17db      	asrs	r3, r3, #31
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff16 	bl	800014c <display7SEG>
		scan_idx = 1;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <led7SEGScan+0x134>)
 8000322:	2201      	movs	r2, #1
 8000324:	601a      	str	r2, [r3, #0]
		break;
 8000326:	e054      	b.n	80003d2 <led7SEGScan+0x12a>
	case 1:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000328:	2201      	movs	r2, #1
 800032a:	2102      	movs	r1, #2
 800032c:	482a      	ldr	r0, [pc, #168]	; (80003d8 <led7SEGScan+0x130>)
 800032e:	f001 fa70 	bl	8001812 <HAL_GPIO_WritePin>
		display7SEG(firstSEG % 10);
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <led7SEGScan+0x138>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b2b      	ldr	r3, [pc, #172]	; (80003e4 <led7SEGScan+0x13c>)
 8000338:	fb83 1302 	smull	r1, r3, r3, r2
 800033c:	1099      	asrs	r1, r3, #2
 800033e:	17d3      	asrs	r3, r2, #31
 8000340:	1ac9      	subs	r1, r1, r3
 8000342:	460b      	mov	r3, r1
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	440b      	add	r3, r1
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	1ad1      	subs	r1, r2, r3
 800034c:	4608      	mov	r0, r1
 800034e:	f7ff fefd 	bl	800014c <display7SEG>
		scan_idx = 2;
 8000352:	4b22      	ldr	r3, [pc, #136]	; (80003dc <led7SEGScan+0x134>)
 8000354:	2202      	movs	r2, #2
 8000356:	601a      	str	r2, [r3, #0]
		break;
 8000358:	e03b      	b.n	80003d2 <led7SEGScan+0x12a>
	case 2:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800035a:	2201      	movs	r2, #1
 800035c:	2104      	movs	r1, #4
 800035e:	481e      	ldr	r0, [pc, #120]	; (80003d8 <led7SEGScan+0x130>)
 8000360:	f001 fa57 	bl	8001812 <HAL_GPIO_WritePin>
		display7SEG(secondSEG / 10);
 8000364:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <led7SEGScan+0x140>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a1e      	ldr	r2, [pc, #120]	; (80003e4 <led7SEGScan+0x13c>)
 800036a:	fb82 1203 	smull	r1, r2, r2, r3
 800036e:	1092      	asrs	r2, r2, #2
 8000370:	17db      	asrs	r3, r3, #31
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff fee9 	bl	800014c <display7SEG>
		scan_idx = 3;
 800037a:	4b18      	ldr	r3, [pc, #96]	; (80003dc <led7SEGScan+0x134>)
 800037c:	2203      	movs	r2, #3
 800037e:	601a      	str	r2, [r3, #0]
		break;
 8000380:	e027      	b.n	80003d2 <led7SEGScan+0x12a>
	case 3:
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2108      	movs	r1, #8
 8000386:	4814      	ldr	r0, [pc, #80]	; (80003d8 <led7SEGScan+0x130>)
 8000388:	f001 fa43 	bl	8001812 <HAL_GPIO_WritePin>
		display7SEG(secondSEG % 10);
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <led7SEGScan+0x140>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <led7SEGScan+0x13c>)
 8000392:	fb83 1302 	smull	r1, r3, r3, r2
 8000396:	1099      	asrs	r1, r3, #2
 8000398:	17d3      	asrs	r3, r2, #31
 800039a:	1ac9      	subs	r1, r1, r3
 800039c:	460b      	mov	r3, r1
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	440b      	add	r3, r1
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	1ad1      	subs	r1, r2, r3
 80003a6:	4608      	mov	r0, r1
 80003a8:	f7ff fed0 	bl	800014c <display7SEG>
		scan_idx = 4;
 80003ac:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <led7SEGScan+0x134>)
 80003ae:	2204      	movs	r2, #4
 80003b0:	601a      	str	r2, [r3, #0]
		break;
 80003b2:	e00e      	b.n	80003d2 <led7SEGScan+0x12a>
	case 4:
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	2110      	movs	r1, #16
 80003b8:	4807      	ldr	r0, [pc, #28]	; (80003d8 <led7SEGScan+0x130>)
 80003ba:	f001 fa2a 	bl	8001812 <HAL_GPIO_WritePin>
		display7SEG(mode);
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <led7SEGScan+0x144>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff fec2 	bl	800014c <display7SEG>
		scan_idx = 0;
 80003c8:	4b04      	ldr	r3, [pc, #16]	; (80003dc <led7SEGScan+0x134>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
		break;
 80003ce:	e000      	b.n	80003d2 <led7SEGScan+0x12a>
	default:
		break;
 80003d0:	bf00      	nop
	}
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40010c00 	.word	0x40010c00
 80003dc:	2000003c 	.word	0x2000003c
 80003e0:	20000074 	.word	0x20000074
 80003e4:	66666667 	.word	0x66666667
 80003e8:	20000070 	.word	0x20000070
 80003ec:	2000006c 	.word	0x2000006c

080003f0 <trafficInitState>:

static uint16_t trafficRedPins[TRAFFIC_NUMS] = {RED1_Pin, RED2_Pin};
static uint16_t trafficYellowPins[TRAFFIC_NUMS] = {YELLOW1_Pin, YELLOW2_Pin};
static uint16_t trafficGreenPins[TRAFFIC_NUMS] = {GREEN1_Pin, GREEN2_Pin};

void trafficInitState(void) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	trafficRedDuration = 5;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <trafficInitState+0x2c>)
 80003f6:	2205      	movs	r2, #5
 80003f8:	601a      	str	r2, [r3, #0]
	trafficGreenDuration = 3;
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <trafficInitState+0x30>)
 80003fc:	2203      	movs	r2, #3
 80003fe:	601a      	str	r2, [r3, #0]
	trafficYellowDuration = 2;
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <trafficInitState+0x34>)
 8000402:	2202      	movs	r2, #2
 8000404:	601a      	str	r2, [r3, #0]
	trafficReState(0, Traffic_Off);
 8000406:	2100      	movs	r1, #0
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f80d 	bl	8000428 <trafficReState>
	trafficReState(1, Traffic_Off);
 800040e:	2100      	movs	r1, #0
 8000410:	2001      	movs	r0, #1
 8000412:	f000 f809 	bl	8000428 <trafficReState>
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000040 	.word	0x20000040
 8000420:	20000048 	.word	0x20000048
 8000424:	20000044 	.word	0x20000044

08000428 <trafficReState>:

void trafficReState(int idx, enum Traffic_State state) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	70fb      	strb	r3, [r7, #3]
	if (idx < 0 || idx >= TRAFFIC_NUMS) return;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b00      	cmp	r3, #0
 8000438:	f2c0 8098 	blt.w	800056c <trafficReState+0x144>
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b01      	cmp	r3, #1
 8000440:	f300 8094 	bgt.w	800056c <trafficReState+0x144>

	switch (state) {
 8000444:	78fb      	ldrb	r3, [r7, #3]
 8000446:	2b03      	cmp	r3, #3
 8000448:	f200 8092 	bhi.w	8000570 <trafficReState+0x148>
 800044c:	a201      	add	r2, pc, #4	; (adr r2, 8000454 <trafficReState+0x2c>)
 800044e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000452:	bf00      	nop
 8000454:	08000465 	.word	0x08000465
 8000458:	080004a7 	.word	0x080004a7
 800045c:	080004e9 	.word	0x080004e9
 8000460:	0800052b 	.word	0x0800052b
	case Traffic_Off:
		HAL_GPIO_WritePin(GPIOA, trafficRedPins[idx], GPIO_PIN_RESET);
 8000464:	4a44      	ldr	r2, [pc, #272]	; (8000578 <trafficReState+0x150>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800046c:	2200      	movs	r2, #0
 800046e:	4619      	mov	r1, r3
 8000470:	4842      	ldr	r0, [pc, #264]	; (800057c <trafficReState+0x154>)
 8000472:	f001 f9ce 	bl	8001812 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, trafficYellowPins[idx], GPIO_PIN_RESET);
 8000476:	4a42      	ldr	r2, [pc, #264]	; (8000580 <trafficReState+0x158>)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800047e:	2200      	movs	r2, #0
 8000480:	4619      	mov	r1, r3
 8000482:	483e      	ldr	r0, [pc, #248]	; (800057c <trafficReState+0x154>)
 8000484:	f001 f9c5 	bl	8001812 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, trafficGreenPins[idx], GPIO_PIN_RESET);
 8000488:	4a3e      	ldr	r2, [pc, #248]	; (8000584 <trafficReState+0x15c>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000490:	2200      	movs	r2, #0
 8000492:	4619      	mov	r1, r3
 8000494:	4839      	ldr	r0, [pc, #228]	; (800057c <trafficReState+0x154>)
 8000496:	f001 f9bc 	bl	8001812 <HAL_GPIO_WritePin>
		trafficState[idx] = Traffic_Off;
 800049a:	4a3b      	ldr	r2, [pc, #236]	; (8000588 <trafficReState+0x160>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4413      	add	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
		break;
 80004a4:	e065      	b.n	8000572 <trafficReState+0x14a>
	case Traffic_Red:
		HAL_GPIO_WritePin(GPIOA, trafficRedPins[idx], GPIO_PIN_SET);
 80004a6:	4a34      	ldr	r2, [pc, #208]	; (8000578 <trafficReState+0x150>)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004ae:	2201      	movs	r2, #1
 80004b0:	4619      	mov	r1, r3
 80004b2:	4832      	ldr	r0, [pc, #200]	; (800057c <trafficReState+0x154>)
 80004b4:	f001 f9ad 	bl	8001812 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, trafficYellowPins[idx], GPIO_PIN_RESET);
 80004b8:	4a31      	ldr	r2, [pc, #196]	; (8000580 <trafficReState+0x158>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004c0:	2200      	movs	r2, #0
 80004c2:	4619      	mov	r1, r3
 80004c4:	482d      	ldr	r0, [pc, #180]	; (800057c <trafficReState+0x154>)
 80004c6:	f001 f9a4 	bl	8001812 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, trafficGreenPins[idx], GPIO_PIN_RESET);
 80004ca:	4a2e      	ldr	r2, [pc, #184]	; (8000584 <trafficReState+0x15c>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004d2:	2200      	movs	r2, #0
 80004d4:	4619      	mov	r1, r3
 80004d6:	4829      	ldr	r0, [pc, #164]	; (800057c <trafficReState+0x154>)
 80004d8:	f001 f99b 	bl	8001812 <HAL_GPIO_WritePin>
		trafficState[idx] = Traffic_Red;
 80004dc:	4a2a      	ldr	r2, [pc, #168]	; (8000588 <trafficReState+0x160>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
		break;
 80004e6:	e044      	b.n	8000572 <trafficReState+0x14a>
	case Traffic_Yellow:
		HAL_GPIO_WritePin(GPIOA, trafficRedPins[idx], GPIO_PIN_RESET);
 80004e8:	4a23      	ldr	r2, [pc, #140]	; (8000578 <trafficReState+0x150>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004f0:	2200      	movs	r2, #0
 80004f2:	4619      	mov	r1, r3
 80004f4:	4821      	ldr	r0, [pc, #132]	; (800057c <trafficReState+0x154>)
 80004f6:	f001 f98c 	bl	8001812 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, trafficYellowPins[idx], GPIO_PIN_SET);
 80004fa:	4a21      	ldr	r2, [pc, #132]	; (8000580 <trafficReState+0x158>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000502:	2201      	movs	r2, #1
 8000504:	4619      	mov	r1, r3
 8000506:	481d      	ldr	r0, [pc, #116]	; (800057c <trafficReState+0x154>)
 8000508:	f001 f983 	bl	8001812 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, trafficGreenPins[idx], GPIO_PIN_RESET);
 800050c:	4a1d      	ldr	r2, [pc, #116]	; (8000584 <trafficReState+0x15c>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000514:	2200      	movs	r2, #0
 8000516:	4619      	mov	r1, r3
 8000518:	4818      	ldr	r0, [pc, #96]	; (800057c <trafficReState+0x154>)
 800051a:	f001 f97a 	bl	8001812 <HAL_GPIO_WritePin>
		trafficState[idx] = Traffic_Yellow;
 800051e:	4a1a      	ldr	r2, [pc, #104]	; (8000588 <trafficReState+0x160>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4413      	add	r3, r2
 8000524:	2202      	movs	r2, #2
 8000526:	701a      	strb	r2, [r3, #0]
		break;
 8000528:	e023      	b.n	8000572 <trafficReState+0x14a>
	case Traffic_Green:
		HAL_GPIO_WritePin(GPIOA, trafficRedPins[idx], GPIO_PIN_RESET);
 800052a:	4a13      	ldr	r2, [pc, #76]	; (8000578 <trafficReState+0x150>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000532:	2200      	movs	r2, #0
 8000534:	4619      	mov	r1, r3
 8000536:	4811      	ldr	r0, [pc, #68]	; (800057c <trafficReState+0x154>)
 8000538:	f001 f96b 	bl	8001812 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, trafficYellowPins[idx], GPIO_PIN_RESET);
 800053c:	4a10      	ldr	r2, [pc, #64]	; (8000580 <trafficReState+0x158>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000544:	2200      	movs	r2, #0
 8000546:	4619      	mov	r1, r3
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <trafficReState+0x154>)
 800054a:	f001 f962 	bl	8001812 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, trafficGreenPins[idx], GPIO_PIN_SET);
 800054e:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <trafficReState+0x15c>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000556:	2201      	movs	r2, #1
 8000558:	4619      	mov	r1, r3
 800055a:	4808      	ldr	r0, [pc, #32]	; (800057c <trafficReState+0x154>)
 800055c:	f001 f959 	bl	8001812 <HAL_GPIO_WritePin>
		trafficState[idx] = Traffic_Green;
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <trafficReState+0x160>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	2203      	movs	r2, #3
 8000568:	701a      	strb	r2, [r3, #0]
		break;
 800056a:	e002      	b.n	8000572 <trafficReState+0x14a>
	if (idx < 0 || idx >= TRAFFIC_NUMS) return;
 800056c:	bf00      	nop
 800056e:	e000      	b.n	8000572 <trafficReState+0x14a>
	default:
		break;
 8000570:	bf00      	nop
	}
}
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000000 	.word	0x20000000
 800057c:	40010800 	.word	0x40010800
 8000580:	20000004 	.word	0x20000004
 8000584:	20000008 	.word	0x20000008
 8000588:	2000004c 	.word	0x2000004c

0800058c <fsmInitState>:

#include "fsm_auto.h"

enum FSM_STATE fsmState = FSM_NORMAL;

void fsmInitState(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	trafficInitState();
 8000590:	f7ff ff2e 	bl	80003f0 <trafficInitState>
	fsmReState(FSM_NORMAL);
 8000594:	2000      	movs	r0, #0
 8000596:	f000 f80b 	bl	80005b0 <fsmReState>
	HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <fsmInitState+0x20>)
 80005a2:	f001 f936 	bl	8001812 <HAL_GPIO_WritePin>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40010800 	.word	0x40010800

080005b0 <fsmReState>:

void fsmReState(enum FSM_STATE state) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b03      	cmp	r3, #3
 80005be:	d87b      	bhi.n	80006b8 <fsmReState+0x108>
 80005c0:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <fsmReState+0x18>)
 80005c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c6:	bf00      	nop
 80005c8:	080005d9 	.word	0x080005d9
 80005cc:	08000611 	.word	0x08000611
 80005d0:	08000649 	.word	0x08000649
 80005d4:	08000681 	.word	0x08000681
	case FSM_NORMAL:
		setTimer(1, TRAFFIC_SEC_DUR);			// CountDown
 80005d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fcf9 	bl	8000fd4 <setTimer>
		firstSEG = trafficRedDuration;
 80005e2:	4b38      	ldr	r3, [pc, #224]	; (80006c4 <fsmReState+0x114>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a38      	ldr	r2, [pc, #224]	; (80006c8 <fsmReState+0x118>)
 80005e8:	6013      	str	r3, [r2, #0]
		secondSEG = trafficGreenDuration;
 80005ea:	4b38      	ldr	r3, [pc, #224]	; (80006cc <fsmReState+0x11c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <fsmReState+0x120>)
 80005f0:	6013      	str	r3, [r2, #0]
		mode = 1;
 80005f2:	4b38      	ldr	r3, [pc, #224]	; (80006d4 <fsmReState+0x124>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
		trafficReState(0, Traffic_Red);
 80005f8:	2101      	movs	r1, #1
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff ff14 	bl	8000428 <trafficReState>
		trafficReState(1, Traffic_Green);
 8000600:	2103      	movs	r1, #3
 8000602:	2001      	movs	r0, #1
 8000604:	f7ff ff10 	bl	8000428 <trafficReState>
		fsmState = FSM_NORMAL;
 8000608:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <fsmReState+0x128>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
		break;
 800060e:	e054      	b.n	80006ba <fsmReState+0x10a>
	case FSM_MODE_RED:
		setTimer(1, TRAFFIC_BLINK_DUR);
 8000610:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fcdd 	bl	8000fd4 <setTimer>
		firstSEG = trafficRedDuration;
 800061a:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <fsmReState+0x114>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a2a      	ldr	r2, [pc, #168]	; (80006c8 <fsmReState+0x118>)
 8000620:	6013      	str	r3, [r2, #0]
		secondSEG = trafficRedDuration;
 8000622:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <fsmReState+0x114>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a2a      	ldr	r2, [pc, #168]	; (80006d0 <fsmReState+0x120>)
 8000628:	6013      	str	r3, [r2, #0]
		mode = 2;
 800062a:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <fsmReState+0x124>)
 800062c:	2202      	movs	r2, #2
 800062e:	601a      	str	r2, [r3, #0]
		trafficReState(0, Traffic_Off);
 8000630:	2100      	movs	r1, #0
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff fef8 	bl	8000428 <trafficReState>
		trafficReState(1, Traffic_Off);
 8000638:	2100      	movs	r1, #0
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff fef4 	bl	8000428 <trafficReState>
		fsmState = FSM_MODE_RED;
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <fsmReState+0x128>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
		break;
 8000646:	e038      	b.n	80006ba <fsmReState+0x10a>
	case FSM_MODE_YELLOW:
		setTimer(1, TRAFFIC_BLINK_DUR);
 8000648:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800064c:	2001      	movs	r0, #1
 800064e:	f000 fcc1 	bl	8000fd4 <setTimer>
		firstSEG = trafficYellowDuration;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <fsmReState+0x12c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <fsmReState+0x118>)
 8000658:	6013      	str	r3, [r2, #0]
		secondSEG = trafficYellowDuration;
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <fsmReState+0x12c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a1c      	ldr	r2, [pc, #112]	; (80006d0 <fsmReState+0x120>)
 8000660:	6013      	str	r3, [r2, #0]
		mode = 3;
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <fsmReState+0x124>)
 8000664:	2203      	movs	r2, #3
 8000666:	601a      	str	r2, [r3, #0]
		trafficReState(0, Traffic_Off);
 8000668:	2100      	movs	r1, #0
 800066a:	2000      	movs	r0, #0
 800066c:	f7ff fedc 	bl	8000428 <trafficReState>
		trafficReState(1, Traffic_Off);
 8000670:	2100      	movs	r1, #0
 8000672:	2001      	movs	r0, #1
 8000674:	f7ff fed8 	bl	8000428 <trafficReState>
		fsmState = FSM_MODE_YELLOW;
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <fsmReState+0x128>)
 800067a:	2202      	movs	r2, #2
 800067c:	701a      	strb	r2, [r3, #0]
		break;
 800067e:	e01c      	b.n	80006ba <fsmReState+0x10a>
	case FSM_MODE_GREEN:
		setTimer(1, TRAFFIC_BLINK_DUR);
 8000680:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000684:	2001      	movs	r0, #1
 8000686:	f000 fca5 	bl	8000fd4 <setTimer>
		firstSEG = trafficGreenDuration;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <fsmReState+0x11c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <fsmReState+0x118>)
 8000690:	6013      	str	r3, [r2, #0]
		secondSEG = trafficGreenDuration;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <fsmReState+0x11c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <fsmReState+0x120>)
 8000698:	6013      	str	r3, [r2, #0]
		mode = 4;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <fsmReState+0x124>)
 800069c:	2204      	movs	r2, #4
 800069e:	601a      	str	r2, [r3, #0]
		trafficReState(0, Traffic_Off);
 80006a0:	2100      	movs	r1, #0
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff fec0 	bl	8000428 <trafficReState>
		trafficReState(1, Traffic_Off);
 80006a8:	2100      	movs	r1, #0
 80006aa:	2001      	movs	r0, #1
 80006ac:	f7ff febc 	bl	8000428 <trafficReState>
		fsmState = FSM_MODE_GREEN;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <fsmReState+0x128>)
 80006b2:	2203      	movs	r2, #3
 80006b4:	701a      	strb	r2, [r3, #0]
		break;
 80006b6:	e000      	b.n	80006ba <fsmReState+0x10a>
	default:
		break;
 80006b8:	bf00      	nop
	}
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000040 	.word	0x20000040
 80006c8:	20000074 	.word	0x20000074
 80006cc:	20000048 	.word	0x20000048
 80006d0:	20000070 	.word	0x20000070
 80006d4:	2000006c 	.word	0x2000006c
 80006d8:	2000004e 	.word	0x2000004e
 80006dc:	20000044 	.word	0x20000044

080006e0 <fsmProcess>:

void fsmProcess(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	switch (fsmState) {
 80006e4:	4ba6      	ldr	r3, [pc, #664]	; (8000980 <fsmProcess+0x2a0>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	f200 8287 	bhi.w	8000bfc <fsmProcess+0x51c>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <fsmProcess+0x14>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000705 	.word	0x08000705
 80006f8:	08000863 	.word	0x08000863
 80006fc:	080009a1 	.word	0x080009a1
 8000700:	08000ac9 	.word	0x08000ac9
	case FSM_NORMAL:
		if (getTimerFlag(1) == 1) {
 8000704:	2001      	movs	r0, #1
 8000706:	f000 fcb9 	bl	800107c <getTimerFlag>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	f040 808e 	bne.w	800082e <fsmProcess+0x14e>
			setTimer(1, TRAFFIC_SEC_DUR);
 8000712:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000716:	2001      	movs	r0, #1
 8000718:	f000 fc5c 	bl	8000fd4 <setTimer>

			switch (trafficState[0]) {
 800071c:	4b99      	ldr	r3, [pc, #612]	; (8000984 <fsmProcess+0x2a4>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b03      	cmp	r3, #3
 8000722:	d02a      	beq.n	800077a <fsmProcess+0x9a>
 8000724:	2b03      	cmp	r3, #3
 8000726:	dc3a      	bgt.n	800079e <fsmProcess+0xbe>
 8000728:	2b01      	cmp	r3, #1
 800072a:	d002      	beq.n	8000732 <fsmProcess+0x52>
 800072c:	2b02      	cmp	r3, #2
 800072e:	d012      	beq.n	8000756 <fsmProcess+0x76>
					trafficReState(0, Traffic_Yellow);
				}

				break;
			default:
				break;
 8000730:	e035      	b.n	800079e <fsmProcess+0xbe>
				firstSEG--;
 8000732:	4b95      	ldr	r3, [pc, #596]	; (8000988 <fsmProcess+0x2a8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	3b01      	subs	r3, #1
 8000738:	4a93      	ldr	r2, [pc, #588]	; (8000988 <fsmProcess+0x2a8>)
 800073a:	6013      	str	r3, [r2, #0]
				if (firstSEG <= 0) {
 800073c:	4b92      	ldr	r3, [pc, #584]	; (8000988 <fsmProcess+0x2a8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	dc2e      	bgt.n	80007a2 <fsmProcess+0xc2>
					firstSEG = trafficGreenDuration;
 8000744:	4b91      	ldr	r3, [pc, #580]	; (800098c <fsmProcess+0x2ac>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a8f      	ldr	r2, [pc, #572]	; (8000988 <fsmProcess+0x2a8>)
 800074a:	6013      	str	r3, [r2, #0]
					trafficReState(0, Traffic_Green);
 800074c:	2103      	movs	r1, #3
 800074e:	2000      	movs	r0, #0
 8000750:	f7ff fe6a 	bl	8000428 <trafficReState>
				break;
 8000754:	e025      	b.n	80007a2 <fsmProcess+0xc2>
				firstSEG--;
 8000756:	4b8c      	ldr	r3, [pc, #560]	; (8000988 <fsmProcess+0x2a8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3b01      	subs	r3, #1
 800075c:	4a8a      	ldr	r2, [pc, #552]	; (8000988 <fsmProcess+0x2a8>)
 800075e:	6013      	str	r3, [r2, #0]
				if (firstSEG <= 0) {
 8000760:	4b89      	ldr	r3, [pc, #548]	; (8000988 <fsmProcess+0x2a8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	dc1e      	bgt.n	80007a6 <fsmProcess+0xc6>
					firstSEG = trafficRedDuration;
 8000768:	4b89      	ldr	r3, [pc, #548]	; (8000990 <fsmProcess+0x2b0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a86      	ldr	r2, [pc, #536]	; (8000988 <fsmProcess+0x2a8>)
 800076e:	6013      	str	r3, [r2, #0]
					trafficReState(0, Traffic_Red);
 8000770:	2101      	movs	r1, #1
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fe58 	bl	8000428 <trafficReState>
				break;
 8000778:	e015      	b.n	80007a6 <fsmProcess+0xc6>
				firstSEG--;
 800077a:	4b83      	ldr	r3, [pc, #524]	; (8000988 <fsmProcess+0x2a8>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	4a81      	ldr	r2, [pc, #516]	; (8000988 <fsmProcess+0x2a8>)
 8000782:	6013      	str	r3, [r2, #0]
				if (firstSEG <= 0) {
 8000784:	4b80      	ldr	r3, [pc, #512]	; (8000988 <fsmProcess+0x2a8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dc0e      	bgt.n	80007aa <fsmProcess+0xca>
					firstSEG = trafficYellowDuration;
 800078c:	4b81      	ldr	r3, [pc, #516]	; (8000994 <fsmProcess+0x2b4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a7d      	ldr	r2, [pc, #500]	; (8000988 <fsmProcess+0x2a8>)
 8000792:	6013      	str	r3, [r2, #0]
					trafficReState(0, Traffic_Yellow);
 8000794:	2102      	movs	r1, #2
 8000796:	2000      	movs	r0, #0
 8000798:	f7ff fe46 	bl	8000428 <trafficReState>
				break;
 800079c:	e005      	b.n	80007aa <fsmProcess+0xca>
				break;
 800079e:	bf00      	nop
 80007a0:	e004      	b.n	80007ac <fsmProcess+0xcc>
				break;
 80007a2:	bf00      	nop
 80007a4:	e002      	b.n	80007ac <fsmProcess+0xcc>
				break;
 80007a6:	bf00      	nop
 80007a8:	e000      	b.n	80007ac <fsmProcess+0xcc>
				break;
 80007aa:	bf00      	nop
			}

			switch (trafficState[1]) {
 80007ac:	4b75      	ldr	r3, [pc, #468]	; (8000984 <fsmProcess+0x2a4>)
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d02a      	beq.n	800080a <fsmProcess+0x12a>
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	dc3c      	bgt.n	8000832 <fsmProcess+0x152>
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d002      	beq.n	80007c2 <fsmProcess+0xe2>
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d012      	beq.n	80007e6 <fsmProcess+0x106>
					trafficReState(1, Traffic_Yellow);
				}

				break;
			default:
				break;
 80007c0:	e037      	b.n	8000832 <fsmProcess+0x152>
				secondSEG--;
 80007c2:	4b75      	ldr	r3, [pc, #468]	; (8000998 <fsmProcess+0x2b8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	4a73      	ldr	r2, [pc, #460]	; (8000998 <fsmProcess+0x2b8>)
 80007ca:	6013      	str	r3, [r2, #0]
				if (secondSEG <= 0) {
 80007cc:	4b72      	ldr	r3, [pc, #456]	; (8000998 <fsmProcess+0x2b8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	dc30      	bgt.n	8000836 <fsmProcess+0x156>
					secondSEG = trafficGreenDuration;
 80007d4:	4b6d      	ldr	r3, [pc, #436]	; (800098c <fsmProcess+0x2ac>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a6f      	ldr	r2, [pc, #444]	; (8000998 <fsmProcess+0x2b8>)
 80007da:	6013      	str	r3, [r2, #0]
					trafficReState(1, Traffic_Green);
 80007dc:	2103      	movs	r1, #3
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff fe22 	bl	8000428 <trafficReState>
				break;
 80007e4:	e027      	b.n	8000836 <fsmProcess+0x156>
				secondSEG--;
 80007e6:	4b6c      	ldr	r3, [pc, #432]	; (8000998 <fsmProcess+0x2b8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	4a6a      	ldr	r2, [pc, #424]	; (8000998 <fsmProcess+0x2b8>)
 80007ee:	6013      	str	r3, [r2, #0]
				if (secondSEG <= 0) {
 80007f0:	4b69      	ldr	r3, [pc, #420]	; (8000998 <fsmProcess+0x2b8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	dc20      	bgt.n	800083a <fsmProcess+0x15a>
					secondSEG = trafficRedDuration;
 80007f8:	4b65      	ldr	r3, [pc, #404]	; (8000990 <fsmProcess+0x2b0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a66      	ldr	r2, [pc, #408]	; (8000998 <fsmProcess+0x2b8>)
 80007fe:	6013      	str	r3, [r2, #0]
					trafficReState(1, Traffic_Red);
 8000800:	2101      	movs	r1, #1
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff fe10 	bl	8000428 <trafficReState>
				break;
 8000808:	e017      	b.n	800083a <fsmProcess+0x15a>
				secondSEG--;
 800080a:	4b63      	ldr	r3, [pc, #396]	; (8000998 <fsmProcess+0x2b8>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3b01      	subs	r3, #1
 8000810:	4a61      	ldr	r2, [pc, #388]	; (8000998 <fsmProcess+0x2b8>)
 8000812:	6013      	str	r3, [r2, #0]
				if (secondSEG == 0) {
 8000814:	4b60      	ldr	r3, [pc, #384]	; (8000998 <fsmProcess+0x2b8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d110      	bne.n	800083e <fsmProcess+0x15e>
					secondSEG = trafficYellowDuration;
 800081c:	4b5d      	ldr	r3, [pc, #372]	; (8000994 <fsmProcess+0x2b4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a5d      	ldr	r2, [pc, #372]	; (8000998 <fsmProcess+0x2b8>)
 8000822:	6013      	str	r3, [r2, #0]
					trafficReState(1, Traffic_Yellow);
 8000824:	2102      	movs	r1, #2
 8000826:	2001      	movs	r0, #1
 8000828:	f7ff fdfe 	bl	8000428 <trafficReState>
				break;
 800082c:	e007      	b.n	800083e <fsmProcess+0x15e>
			}
		}
 800082e:	bf00      	nop
 8000830:	e006      	b.n	8000840 <fsmProcess+0x160>
				break;
 8000832:	bf00      	nop
 8000834:	e004      	b.n	8000840 <fsmProcess+0x160>
				break;
 8000836:	bf00      	nop
 8000838:	e002      	b.n	8000840 <fsmProcess+0x160>
				break;
 800083a:	bf00      	nop
 800083c:	e000      	b.n	8000840 <fsmProcess+0x160>
				break;
 800083e:	bf00      	nop

		if (buttonPress(0)) {
 8000840:	2000      	movs	r0, #0
 8000842:	f000 fa83 	bl	8000d4c <buttonPress>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	f000 81d0 	beq.w	8000bee <fsmProcess+0x50e>
			fsmReState(FSM_MODE_RED);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff feae 	bl	80005b0 <fsmReState>
			HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800085a:	4850      	ldr	r0, [pc, #320]	; (800099c <fsmProcess+0x2bc>)
 800085c:	f000 ffd9 	bl	8001812 <HAL_GPIO_WritePin>
		}
		break;
 8000860:	e1c5      	b.n	8000bee <fsmProcess+0x50e>
	case FSM_MODE_RED:
		if (getTimerFlag(1) == 1) {
 8000862:	2001      	movs	r0, #1
 8000864:	f000 fc0a 	bl	800107c <getTimerFlag>
 8000868:	4603      	mov	r3, r0
 800086a:	2b01      	cmp	r3, #1
 800086c:	d122      	bne.n	80008b4 <fsmProcess+0x1d4>
			switch (trafficState[0]) {
 800086e:	4b45      	ldr	r3, [pc, #276]	; (8000984 <fsmProcess+0x2a4>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <fsmProcess+0x19c>
 8000876:	2b01      	cmp	r3, #1
 8000878:	d00e      	beq.n	8000898 <fsmProcess+0x1b8>
				setTimer(1, TRAFFIC_BLINK_DUR);
				trafficReState(0, Traffic_Off);
				trafficReState(1, Traffic_Off);
				break;
			default:
				break;
 800087a:	e01c      	b.n	80008b6 <fsmProcess+0x1d6>
				setTimer(1, TRAFFIC_BLINK_DUR);
 800087c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000880:	2001      	movs	r0, #1
 8000882:	f000 fba7 	bl	8000fd4 <setTimer>
				trafficReState(0, Traffic_Red);
 8000886:	2101      	movs	r1, #1
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fdcd 	bl	8000428 <trafficReState>
				trafficReState(1, Traffic_Red);
 800088e:	2101      	movs	r1, #1
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff fdc9 	bl	8000428 <trafficReState>
				break;
 8000896:	e00e      	b.n	80008b6 <fsmProcess+0x1d6>
				setTimer(1, TRAFFIC_BLINK_DUR);
 8000898:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800089c:	2001      	movs	r0, #1
 800089e:	f000 fb99 	bl	8000fd4 <setTimer>
				trafficReState(0, Traffic_Off);
 80008a2:	2100      	movs	r1, #0
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff fdbf 	bl	8000428 <trafficReState>
				trafficReState(1, Traffic_Off);
 80008aa:	2100      	movs	r1, #0
 80008ac:	2001      	movs	r0, #1
 80008ae:	f7ff fdbb 	bl	8000428 <trafficReState>
				break;
 80008b2:	e000      	b.n	80008b6 <fsmProcess+0x1d6>
			}
		}
 80008b4:	bf00      	nop
		if (buttonPress(0)) {
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 fa48 	bl	8000d4c <buttonPress>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <fsmProcess+0x1e8>

			fsmReState(FSM_MODE_YELLOW);
 80008c2:	2002      	movs	r0, #2
 80008c4:	f7ff fe74 	bl	80005b0 <fsmReState>
		}

		if (buttonPress(1)) {
 80008c8:	2001      	movs	r0, #1
 80008ca:	f000 fa3f 	bl	8000d4c <buttonPress>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d021      	beq.n	8000918 <fsmProcess+0x238>
			HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008da:	4830      	ldr	r0, [pc, #192]	; (800099c <fsmProcess+0x2bc>)
 80008dc:	f000 ff99 	bl	8001812 <HAL_GPIO_WritePin>
			firstSEG++;
 80008e0:	4b29      	ldr	r3, [pc, #164]	; (8000988 <fsmProcess+0x2a8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	4a28      	ldr	r2, [pc, #160]	; (8000988 <fsmProcess+0x2a8>)
 80008e8:	6013      	str	r3, [r2, #0]
			if (firstSEG > 99) firstSEG = 1;
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <fsmProcess+0x2a8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b63      	cmp	r3, #99	; 0x63
 80008f0:	dd02      	ble.n	80008f8 <fsmProcess+0x218>
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <fsmProcess+0x2a8>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
			secondSEG++;
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <fsmProcess+0x2b8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a26      	ldr	r2, [pc, #152]	; (8000998 <fsmProcess+0x2b8>)
 8000900:	6013      	str	r3, [r2, #0]
			if (secondSEG > 99) secondSEG = 1;
 8000902:	4b25      	ldr	r3, [pc, #148]	; (8000998 <fsmProcess+0x2b8>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b63      	cmp	r3, #99	; 0x63
 8000908:	dd02      	ble.n	8000910 <fsmProcess+0x230>
 800090a:	4b23      	ldr	r3, [pc, #140]	; (8000998 <fsmProcess+0x2b8>)
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
			trafficRedDuration = firstSEG;
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <fsmProcess+0x2a8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <fsmProcess+0x2b0>)
 8000916:	6013      	str	r3, [r2, #0]
		}

		if (buttonPress(2)) {
 8000918:	2002      	movs	r0, #2
 800091a:	f000 fa17 	bl	8000d4c <buttonPress>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d021      	beq.n	8000968 <fsmProcess+0x288>
			HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800092a:	481c      	ldr	r0, [pc, #112]	; (800099c <fsmProcess+0x2bc>)
 800092c:	f000 ff71 	bl	8001812 <HAL_GPIO_WritePin>
			firstSEG--;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <fsmProcess+0x2a8>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3b01      	subs	r3, #1
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <fsmProcess+0x2a8>)
 8000938:	6013      	str	r3, [r2, #0]
			if (firstSEG < 1) firstSEG = 99;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <fsmProcess+0x2a8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	dc02      	bgt.n	8000948 <fsmProcess+0x268>
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <fsmProcess+0x2a8>)
 8000944:	2263      	movs	r2, #99	; 0x63
 8000946:	601a      	str	r2, [r3, #0]
			secondSEG--;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <fsmProcess+0x2b8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3b01      	subs	r3, #1
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <fsmProcess+0x2b8>)
 8000950:	6013      	str	r3, [r2, #0]
			if (secondSEG < 1) secondSEG = 99;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <fsmProcess+0x2b8>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	dc02      	bgt.n	8000960 <fsmProcess+0x280>
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <fsmProcess+0x2b8>)
 800095c:	2263      	movs	r2, #99	; 0x63
 800095e:	601a      	str	r2, [r3, #0]
			trafficRedDuration = firstSEG;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <fsmProcess+0x2a8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <fsmProcess+0x2b0>)
 8000966:	6013      	str	r3, [r2, #0]
		}

		if (buttonPress(3)) {
 8000968:	2003      	movs	r0, #3
 800096a:	f000 f9ef 	bl	8000d4c <buttonPress>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	f000 813e 	beq.w	8000bf2 <fsmProcess+0x512>
			fsmReState(FSM_NORMAL);
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff fe1a 	bl	80005b0 <fsmReState>
//			HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, SET);
//			trafficRedDuration = firstSEG;
		}
		break;
 800097c:	e139      	b.n	8000bf2 <fsmProcess+0x512>
 800097e:	bf00      	nop
 8000980:	2000004e 	.word	0x2000004e
 8000984:	2000004c 	.word	0x2000004c
 8000988:	20000074 	.word	0x20000074
 800098c:	20000048 	.word	0x20000048
 8000990:	20000040 	.word	0x20000040
 8000994:	20000044 	.word	0x20000044
 8000998:	20000070 	.word	0x20000070
 800099c:	40010800 	.word	0x40010800
	case FSM_MODE_YELLOW:
		if (getTimerFlag(1) == 1) {
 80009a0:	2001      	movs	r0, #1
 80009a2:	f000 fb6b 	bl	800107c <getTimerFlag>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d122      	bne.n	80009f2 <fsmProcess+0x312>
			switch (trafficState[0]) {
 80009ac:	4b94      	ldr	r3, [pc, #592]	; (8000c00 <fsmProcess+0x520>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <fsmProcess+0x2da>
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d00e      	beq.n	80009d6 <fsmProcess+0x2f6>
				setTimer(1, TRAFFIC_BLINK_DUR);
				trafficReState(0, Traffic_Off);
				trafficReState(1, Traffic_Off);
				break;
			default:
				break;
 80009b8:	e01c      	b.n	80009f4 <fsmProcess+0x314>
				setTimer(1, TRAFFIC_BLINK_DUR);
 80009ba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fb08 	bl	8000fd4 <setTimer>
				trafficReState(0, Traffic_Yellow);
 80009c4:	2102      	movs	r1, #2
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff fd2e 	bl	8000428 <trafficReState>
				trafficReState(1, Traffic_Yellow);
 80009cc:	2102      	movs	r1, #2
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fd2a 	bl	8000428 <trafficReState>
				break;
 80009d4:	e00e      	b.n	80009f4 <fsmProcess+0x314>
				setTimer(1, TRAFFIC_BLINK_DUR);
 80009d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009da:	2001      	movs	r0, #1
 80009dc:	f000 fafa 	bl	8000fd4 <setTimer>
				trafficReState(0, Traffic_Off);
 80009e0:	2100      	movs	r1, #0
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fd20 	bl	8000428 <trafficReState>
				trafficReState(1, Traffic_Off);
 80009e8:	2100      	movs	r1, #0
 80009ea:	2001      	movs	r0, #1
 80009ec:	f7ff fd1c 	bl	8000428 <trafficReState>
				break;
 80009f0:	e000      	b.n	80009f4 <fsmProcess+0x314>
			}
		}
 80009f2:	bf00      	nop
		if (buttonPress(0)) {
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 f9a9 	bl	8000d4c <buttonPress>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d008      	beq.n	8000a12 <fsmProcess+0x332>
			HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a06:	487f      	ldr	r0, [pc, #508]	; (8000c04 <fsmProcess+0x524>)
 8000a08:	f000 ff03 	bl	8001812 <HAL_GPIO_WritePin>
			fsmReState(FSM_MODE_GREEN);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f7ff fdcf 	bl	80005b0 <fsmReState>
		}

		if (buttonPress(1)) {
 8000a12:	2001      	movs	r0, #1
 8000a14:	f000 f99a 	bl	8000d4c <buttonPress>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d021      	beq.n	8000a62 <fsmProcess+0x382>
			HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a24:	4877      	ldr	r0, [pc, #476]	; (8000c04 <fsmProcess+0x524>)
 8000a26:	f000 fef4 	bl	8001812 <HAL_GPIO_WritePin>
			firstSEG++;
 8000a2a:	4b77      	ldr	r3, [pc, #476]	; (8000c08 <fsmProcess+0x528>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a75      	ldr	r2, [pc, #468]	; (8000c08 <fsmProcess+0x528>)
 8000a32:	6013      	str	r3, [r2, #0]
			if (firstSEG > 99) firstSEG = 1;
 8000a34:	4b74      	ldr	r3, [pc, #464]	; (8000c08 <fsmProcess+0x528>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b63      	cmp	r3, #99	; 0x63
 8000a3a:	dd02      	ble.n	8000a42 <fsmProcess+0x362>
 8000a3c:	4b72      	ldr	r3, [pc, #456]	; (8000c08 <fsmProcess+0x528>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
			secondSEG++;
 8000a42:	4b72      	ldr	r3, [pc, #456]	; (8000c0c <fsmProcess+0x52c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	4a70      	ldr	r2, [pc, #448]	; (8000c0c <fsmProcess+0x52c>)
 8000a4a:	6013      	str	r3, [r2, #0]
			if (secondSEG > 99) secondSEG = 1;
 8000a4c:	4b6f      	ldr	r3, [pc, #444]	; (8000c0c <fsmProcess+0x52c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b63      	cmp	r3, #99	; 0x63
 8000a52:	dd02      	ble.n	8000a5a <fsmProcess+0x37a>
 8000a54:	4b6d      	ldr	r3, [pc, #436]	; (8000c0c <fsmProcess+0x52c>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	601a      	str	r2, [r3, #0]
			trafficYellowDuration = firstSEG;
 8000a5a:	4b6b      	ldr	r3, [pc, #428]	; (8000c08 <fsmProcess+0x528>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a6c      	ldr	r2, [pc, #432]	; (8000c10 <fsmProcess+0x530>)
 8000a60:	6013      	str	r3, [r2, #0]
		}

		if (buttonPress(2)) {
 8000a62:	2002      	movs	r0, #2
 8000a64:	f000 f972 	bl	8000d4c <buttonPress>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d021      	beq.n	8000ab2 <fsmProcess+0x3d2>
			HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a74:	4863      	ldr	r0, [pc, #396]	; (8000c04 <fsmProcess+0x524>)
 8000a76:	f000 fecc 	bl	8001812 <HAL_GPIO_WritePin>
			firstSEG--;
 8000a7a:	4b63      	ldr	r3, [pc, #396]	; (8000c08 <fsmProcess+0x528>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	4a61      	ldr	r2, [pc, #388]	; (8000c08 <fsmProcess+0x528>)
 8000a82:	6013      	str	r3, [r2, #0]
			if (firstSEG < 1) firstSEG = 99;
 8000a84:	4b60      	ldr	r3, [pc, #384]	; (8000c08 <fsmProcess+0x528>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	dc02      	bgt.n	8000a92 <fsmProcess+0x3b2>
 8000a8c:	4b5e      	ldr	r3, [pc, #376]	; (8000c08 <fsmProcess+0x528>)
 8000a8e:	2263      	movs	r2, #99	; 0x63
 8000a90:	601a      	str	r2, [r3, #0]
			secondSEG--;
 8000a92:	4b5e      	ldr	r3, [pc, #376]	; (8000c0c <fsmProcess+0x52c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4a5c      	ldr	r2, [pc, #368]	; (8000c0c <fsmProcess+0x52c>)
 8000a9a:	6013      	str	r3, [r2, #0]
			if (secondSEG < 1) secondSEG = 99;
 8000a9c:	4b5b      	ldr	r3, [pc, #364]	; (8000c0c <fsmProcess+0x52c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	dc02      	bgt.n	8000aaa <fsmProcess+0x3ca>
 8000aa4:	4b59      	ldr	r3, [pc, #356]	; (8000c0c <fsmProcess+0x52c>)
 8000aa6:	2263      	movs	r2, #99	; 0x63
 8000aa8:	601a      	str	r2, [r3, #0]
			trafficYellowDuration = firstSEG;
 8000aaa:	4b57      	ldr	r3, [pc, #348]	; (8000c08 <fsmProcess+0x528>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a58      	ldr	r2, [pc, #352]	; (8000c10 <fsmProcess+0x530>)
 8000ab0:	6013      	str	r3, [r2, #0]
		}

		if (buttonPress(3)) {
 8000ab2:	2003      	movs	r0, #3
 8000ab4:	f000 f94a 	bl	8000d4c <buttonPress>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 809b 	beq.w	8000bf6 <fsmProcess+0x516>
			fsmReState(FSM_NORMAL);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff fd75 	bl	80005b0 <fsmReState>
//			HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, SET);
//			trafficYellowDuration = firstSEG;
		}
		break;
 8000ac6:	e096      	b.n	8000bf6 <fsmProcess+0x516>
	case FSM_MODE_GREEN:
		if (getTimerFlag(1) == 1) {
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f000 fad7 	bl	800107c <getTimerFlag>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d122      	bne.n	8000b1a <fsmProcess+0x43a>
			switch (trafficState[0]) {
 8000ad4:	4b4a      	ldr	r3, [pc, #296]	; (8000c00 <fsmProcess+0x520>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <fsmProcess+0x402>
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	d00e      	beq.n	8000afe <fsmProcess+0x41e>
				setTimer(1, TRAFFIC_BLINK_DUR);
				trafficReState(0, Traffic_Off);
				trafficReState(1, Traffic_Off);
				break;
			default:
				break;
 8000ae0:	e01c      	b.n	8000b1c <fsmProcess+0x43c>
				setTimer(1, TRAFFIC_BLINK_DUR);
 8000ae2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f000 fa74 	bl	8000fd4 <setTimer>
				trafficReState(0, Traffic_Green);
 8000aec:	2103      	movs	r1, #3
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff fc9a 	bl	8000428 <trafficReState>
				trafficReState(1, Traffic_Green);
 8000af4:	2103      	movs	r1, #3
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff fc96 	bl	8000428 <trafficReState>
				break;
 8000afc:	e00e      	b.n	8000b1c <fsmProcess+0x43c>
				setTimer(1, TRAFFIC_BLINK_DUR);
 8000afe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b02:	2001      	movs	r0, #1
 8000b04:	f000 fa66 	bl	8000fd4 <setTimer>
				trafficReState(0, Traffic_Off);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f7ff fc8c 	bl	8000428 <trafficReState>
				trafficReState(1, Traffic_Off);
 8000b10:	2100      	movs	r1, #0
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff fc88 	bl	8000428 <trafficReState>
				break;
 8000b18:	e000      	b.n	8000b1c <fsmProcess+0x43c>
			}
		}
 8000b1a:	bf00      	nop
		if (buttonPress(0)) {
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f000 f915 	bl	8000d4c <buttonPress>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d008      	beq.n	8000b3a <fsmProcess+0x45a>
			HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b2e:	4835      	ldr	r0, [pc, #212]	; (8000c04 <fsmProcess+0x524>)
 8000b30:	f000 fe6f 	bl	8001812 <HAL_GPIO_WritePin>
			fsmReState(FSM_MODE_RED);
 8000b34:	2001      	movs	r0, #1
 8000b36:	f7ff fd3b 	bl	80005b0 <fsmReState>
		}

		if (buttonPress(1)) {
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f000 f906 	bl	8000d4c <buttonPress>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d021      	beq.n	8000b8a <fsmProcess+0x4aa>
			HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b4c:	482d      	ldr	r0, [pc, #180]	; (8000c04 <fsmProcess+0x524>)
 8000b4e:	f000 fe60 	bl	8001812 <HAL_GPIO_WritePin>
			firstSEG++;
 8000b52:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <fsmProcess+0x528>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	4a2b      	ldr	r2, [pc, #172]	; (8000c08 <fsmProcess+0x528>)
 8000b5a:	6013      	str	r3, [r2, #0]
			if (firstSEG > 99) firstSEG = 1;
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <fsmProcess+0x528>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b63      	cmp	r3, #99	; 0x63
 8000b62:	dd02      	ble.n	8000b6a <fsmProcess+0x48a>
 8000b64:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <fsmProcess+0x528>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
			secondSEG++;
 8000b6a:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <fsmProcess+0x52c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a26      	ldr	r2, [pc, #152]	; (8000c0c <fsmProcess+0x52c>)
 8000b72:	6013      	str	r3, [r2, #0]
			if (secondSEG > 99) secondSEG = 1;
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <fsmProcess+0x52c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b63      	cmp	r3, #99	; 0x63
 8000b7a:	dd02      	ble.n	8000b82 <fsmProcess+0x4a2>
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <fsmProcess+0x52c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
			trafficGreenDuration = firstSEG;
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <fsmProcess+0x528>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a23      	ldr	r2, [pc, #140]	; (8000c14 <fsmProcess+0x534>)
 8000b88:	6013      	str	r3, [r2, #0]
		}

		if (buttonPress(2)) {
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f000 f8de 	bl	8000d4c <buttonPress>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d021      	beq.n	8000bda <fsmProcess+0x4fa>
			HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, SET);
 8000b96:	2201      	movs	r2, #1
 8000b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9c:	4819      	ldr	r0, [pc, #100]	; (8000c04 <fsmProcess+0x524>)
 8000b9e:	f000 fe38 	bl	8001812 <HAL_GPIO_WritePin>
			firstSEG--;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <fsmProcess+0x528>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <fsmProcess+0x528>)
 8000baa:	6013      	str	r3, [r2, #0]
			if (firstSEG < 1) firstSEG = 99;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <fsmProcess+0x528>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	dc02      	bgt.n	8000bba <fsmProcess+0x4da>
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <fsmProcess+0x528>)
 8000bb6:	2263      	movs	r2, #99	; 0x63
 8000bb8:	601a      	str	r2, [r3, #0]
			secondSEG--;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <fsmProcess+0x52c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <fsmProcess+0x52c>)
 8000bc2:	6013      	str	r3, [r2, #0]
			if (secondSEG < 1) secondSEG = 99;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <fsmProcess+0x52c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dc02      	bgt.n	8000bd2 <fsmProcess+0x4f2>
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <fsmProcess+0x52c>)
 8000bce:	2263      	movs	r2, #99	; 0x63
 8000bd0:	601a      	str	r2, [r3, #0]
			trafficGreenDuration = firstSEG;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <fsmProcess+0x528>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <fsmProcess+0x534>)
 8000bd8:	6013      	str	r3, [r2, #0]
		}

		if (buttonPress(3)) {
 8000bda:	2003      	movs	r0, #3
 8000bdc:	f000 f8b6 	bl	8000d4c <buttonPress>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d009      	beq.n	8000bfa <fsmProcess+0x51a>
			fsmReState(FSM_NORMAL);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff fce2 	bl	80005b0 <fsmReState>
//			HAL_GPIO_WritePin(SIGNAL_LED_GPIO_Port, SIGNAL_LED_Pin, SET);
//			trafficGreenDuration = firstSEG;
		}
		break;
 8000bec:	e005      	b.n	8000bfa <fsmProcess+0x51a>
		break;
 8000bee:	bf00      	nop
 8000bf0:	e004      	b.n	8000bfc <fsmProcess+0x51c>
		break;
 8000bf2:	bf00      	nop
 8000bf4:	e002      	b.n	8000bfc <fsmProcess+0x51c>
		break;
 8000bf6:	bf00      	nop
 8000bf8:	e000      	b.n	8000bfc <fsmProcess+0x51c>
		break;
 8000bfa:	bf00      	nop
	}
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000004c 	.word	0x2000004c
 8000c04:	40010800 	.word	0x40010800
 8000c08:	20000074 	.word	0x20000074
 8000c0c:	20000070 	.word	0x20000070
 8000c10:	20000044 	.word	0x20000044
 8000c14:	20000048 	.word	0x20000048

08000c18 <buttonReading>:


static uint8_t 	buttonFlags[BUTTON_NUMS];
static uint16_t	buttonCounters[BUTTON_NUMS];

void buttonReading(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	for (int index = 0; index < BUTTON_NUMS; index++) {
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	e07b      	b.n	8000d1c <buttonReading+0x104>
		buttonDebounce2[index] = buttonDebounce1[index];
 8000c24:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <buttonReading+0x114>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	7819      	ldrb	r1, [r3, #0]
 8000c2c:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <buttonReading+0x118>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	460a      	mov	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
		buttonDebounce1[index] = buttonDebounce0[index];
 8000c36:	4a3f      	ldr	r2, [pc, #252]	; (8000d34 <buttonReading+0x11c>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	7819      	ldrb	r1, [r3, #0]
 8000c3e:	4a3b      	ldr	r2, [pc, #236]	; (8000d2c <buttonReading+0x114>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4413      	add	r3, r2
 8000c44:	460a      	mov	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
		buttonDebounce0[index] = HAL_GPIO_ReadPin(GPIOB, buttonPins[index]);
 8000c48:	4a3b      	ldr	r2, [pc, #236]	; (8000d38 <buttonReading+0x120>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c50:	4619      	mov	r1, r3
 8000c52:	483a      	ldr	r0, [pc, #232]	; (8000d3c <buttonReading+0x124>)
 8000c54:	f000 fdc6 	bl	80017e4 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4a35      	ldr	r2, [pc, #212]	; (8000d34 <buttonReading+0x11c>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	460a      	mov	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]

		if ((buttonDebounce0[index] == buttonDebounce1[index]) && (buttonDebounce1[index] == buttonDebounce2[index])) {
 8000c66:	4a33      	ldr	r2, [pc, #204]	; (8000d34 <buttonReading+0x11c>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	492f      	ldr	r1, [pc, #188]	; (8000d2c <buttonReading+0x114>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	440b      	add	r3, r1
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d14d      	bne.n	8000d16 <buttonReading+0xfe>
 8000c7a:	4a2c      	ldr	r2, [pc, #176]	; (8000d2c <buttonReading+0x114>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4413      	add	r3, r2
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	492b      	ldr	r1, [pc, #172]	; (8000d30 <buttonReading+0x118>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	440b      	add	r3, r1
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d143      	bne.n	8000d16 <buttonReading+0xfe>

			if (buttonState[index] != buttonDebounce0[index]) {
 8000c8e:	4a2c      	ldr	r2, [pc, #176]	; (8000d40 <buttonReading+0x128>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	4927      	ldr	r1, [pc, #156]	; (8000d34 <buttonReading+0x11c>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	440b      	add	r3, r1
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d019      	beq.n	8000cd6 <buttonReading+0xbe>
				buttonState[index] = buttonDebounce0[index];
 8000ca2:	4a24      	ldr	r2, [pc, #144]	; (8000d34 <buttonReading+0x11c>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	7819      	ldrb	r1, [r3, #0]
 8000caa:	4a25      	ldr	r2, [pc, #148]	; (8000d40 <buttonReading+0x128>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4413      	add	r3, r2
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	701a      	strb	r2, [r3, #0]

				if (buttonState[index] == PRESSED_STATE) {
 8000cb4:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <buttonReading+0x128>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d12a      	bne.n	8000d16 <buttonReading+0xfe>
					buttonFlags[index] = 1;
 8000cc0:	4a20      	ldr	r2, [pc, #128]	; (8000d44 <buttonReading+0x12c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
					buttonCounters[index] = BUTTON_PRESSED_DUR / TICK;
 8000cca:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <buttonReading+0x130>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2164      	movs	r1, #100	; 0x64
 8000cd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000cd4:	e01f      	b.n	8000d16 <buttonReading+0xfe>
				}

			} else {

				if (buttonState[index] == PRESSED_STATE) {
 8000cd6:	4a1a      	ldr	r2, [pc, #104]	; (8000d40 <buttonReading+0x128>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d119      	bne.n	8000d16 <buttonReading+0xfe>
					buttonCounters[index]--;
 8000ce2:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <buttonReading+0x130>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b299      	uxth	r1, r3
 8000cee:	4a16      	ldr	r2, [pc, #88]	; (8000d48 <buttonReading+0x130>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

					if (buttonCounters[index] <= 0) {
 8000cf6:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <buttonReading+0x130>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d109      	bne.n	8000d16 <buttonReading+0xfe>
						buttonFlags[index] = 1;
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <buttonReading+0x12c>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4413      	add	r3, r2
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
						buttonCounters[index] = BUTTON_HOLD_DUR / TICK;
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <buttonReading+0x130>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2132      	movs	r1, #50	; 0x32
 8000d12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int index = 0; index < BUTTON_NUMS; index++) {
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	dd80      	ble.n	8000c24 <buttonReading+0xc>
					}
				}
			}
		}
	}
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000058 	.word	0x20000058
 8000d30:	2000005c 	.word	0x2000005c
 8000d34:	20000054 	.word	0x20000054
 8000d38:	2000000c 	.word	0x2000000c
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	20000050 	.word	0x20000050
 8000d44:	20000060 	.word	0x20000060
 8000d48:	20000064 	.word	0x20000064

08000d4c <buttonPress>:

int buttonPress(int idx) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	if (idx < 0 || idx >= BUTTON_NUMS) return 0;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db02      	blt.n	8000d60 <buttonPress+0x14>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	dd01      	ble.n	8000d64 <buttonPress+0x18>
 8000d60:	2300      	movs	r3, #0
 8000d62:	e00d      	b.n	8000d80 <buttonPress+0x34>

	if (buttonFlags[idx] == 1) {
 8000d64:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <buttonPress+0x40>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d106      	bne.n	8000d7e <buttonPress+0x32>
		buttonFlags[idx] = 0;
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <buttonPress+0x40>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
		return 1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e000      	b.n	8000d80 <buttonPress+0x34>
	}
	return 0;
 8000d7e:	2300      	movs	r3, #0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000060 	.word	0x20000060

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 fa3c 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f820 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f000 f8a6 	bl	8000eec <MX_GPIO_Init>
  MX_TIM2_Init();
 8000da0:	f000 f858 	bl	8000e54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <main+0x48>)
 8000da6:	f001 f979 	bl	800209c <HAL_TIM_Base_Start_IT>

  led7SEGInitState();
 8000daa:	f7ff fa4f 	bl	800024c <led7SEGInitState>
  fsmInitState();
 8000dae:	f7ff fbed 	bl	800058c <fsmInitState>
  setTimer(0, LED7SEG_SCAN_DUR);
 8000db2:	210a      	movs	r1, #10
 8000db4:	2000      	movs	r0, #0
 8000db6:	f000 f90d 	bl	8000fd4 <setTimer>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (getTimerFlag(0) == 1) {
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f95e 	bl	800107c <getTimerFlag>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d105      	bne.n	8000dd2 <main+0x42>
		  setTimer(0, LED7SEG_SCAN_DUR);
 8000dc6:	210a      	movs	r1, #10
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 f903 	bl	8000fd4 <setTimer>
		  led7SEGScan();
 8000dce:	f7ff fa6b 	bl	80002a8 <led7SEGScan>
	  }
	  fsmProcess();
 8000dd2:	f7ff fc85 	bl	80006e0 <fsmProcess>
	  if (getTimerFlag(0) == 1) {
 8000dd6:	e7f0      	b.n	8000dba <main+0x2a>
 8000dd8:	20000078 	.word	0x20000078

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b090      	sub	sp, #64	; 0x40
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	2228      	movs	r2, #40	; 0x28
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 fd06 	bl	80027fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e02:	2301      	movs	r3, #1
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e06:	2310      	movs	r3, #16
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fd16 	bl	8001844 <HAL_RCC_OscConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e1e:	f000 f8d3 	bl	8000fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e22:	230f      	movs	r3, #15
 8000e24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 ff82 	bl	8001d44 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e46:	f000 f8bf 	bl	8000fc8 <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3740      	adds	r7, #64	; 0x40
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <MX_TIM2_Init+0x94>)
 8000e72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_TIM2_Init+0x94>)
 8000e7a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <MX_TIM2_Init+0x94>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_TIM2_Init+0x94>)
 8000e88:	2209      	movs	r2, #9
 8000e8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_TIM2_Init+0x94>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <MX_TIM2_Init+0x94>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <MX_TIM2_Init+0x94>)
 8000e9a:	f001 f8af 	bl	8001ffc <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ea4:	f000 f890 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <MX_TIM2_Init+0x94>)
 8000eb6:	f001 fa2d 	bl	8002314 <HAL_TIM_ConfigClockSource>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ec0:	f000 f882 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_TIM2_Init+0x94>)
 8000ed2:	f001 fc05 	bl	80026e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000edc:	f000 f874 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000078 	.word	0x20000078

08000eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <MX_GPIO_Init+0xb8>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a27      	ldr	r2, [pc, #156]	; (8000fa4 <MX_GPIO_Init+0xb8>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_GPIO_Init+0xb8>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_GPIO_Init+0xb8>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <MX_GPIO_Init+0xb8>)
 8000f1e:	f043 0308 	orr.w	r3, r3, #8
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_GPIO_Init+0xb8>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f30:	2200      	movs	r2, #0
 8000f32:	f64b 71fe 	movw	r1, #49150	; 0xbffe
 8000f36:	481c      	ldr	r0, [pc, #112]	; (8000fa8 <MX_GPIO_Init+0xbc>)
 8000f38:	f000 fc6b 	bl	8001812 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|RED1_Pin
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin|SIGNAL_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	211f      	movs	r1, #31
 8000f40:	481a      	ldr	r0, [pc, #104]	; (8000fac <MX_GPIO_Init+0xc0>)
 8000f42:	f000 fc66 	bl	8001812 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 RED1_Pin
                           YELLOW1_Pin GREEN1_Pin RED2_Pin YELLOW2_Pin
                           GREEN2_Pin SIGNAL_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000f46:	f64b 73fe 	movw	r3, #49150	; 0xbffe
 8000f4a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|RED1_Pin
                          |YELLOW1_Pin|GREEN1_Pin|RED2_Pin|YELLOW2_Pin
                          |GREEN2_Pin|SIGNAL_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2302      	movs	r3, #2
 8000f56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <MX_GPIO_Init+0xbc>)
 8000f60:	f000 fac6 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           MODE_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000f64:	231f      	movs	r3, #31
 8000f66:	60bb      	str	r3, [r7, #8]
                          |MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2302      	movs	r3, #2
 8000f72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_GPIO_Init+0xc0>)
 8000f7c:	f000 fab8 	bl	80014f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
 8000f80:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000f84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_GPIO_Init+0xc0>)
 8000f96:	f000 faab 	bl	80014f0 <HAL_GPIO_Init>

}
 8000f9a:	bf00      	nop
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010800 	.word	0x40010800
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	timerRun();
 8000fb8:	f000 f830 	bl	800101c <timerRun>
	buttonReading();
 8000fbc:	f7ff fe2c 	bl	8000c18 <buttonReading>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <Error_Handler+0x8>
	...

08000fd4 <setTimer>:
#define TIMER_INACTIVE -1

int timer_flag[NUM_TIME];
int timer_counter[NUM_TIME];

void setTimer(int idx, int counter) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	if (idx < NUM_TIME) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	dc0f      	bgt.n	8001004 <setTimer+0x30>
		timer_flag[idx] = 0;
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <setTimer+0x3c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2100      	movs	r1, #0
 8000fea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timer_counter[idx] = counter / TICK;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <setTimer+0x40>)
 8000ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff6:	1092      	asrs	r2, r2, #2
 8000ff8:	17db      	asrs	r3, r3, #31
 8000ffa:	1ad2      	subs	r2, r2, r3
 8000ffc:	4906      	ldr	r1, [pc, #24]	; (8001018 <setTimer+0x44>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200000d0 	.word	0x200000d0
 8001014:	66666667 	.word	0x66666667
 8001018:	200000c0 	.word	0x200000c0

0800101c <timerRun>:
		timer_flag[idx] = 0;
		timer_counter[idx] = 0;
	}
}

void timerRun() {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_TIME; i++) {
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	e01c      	b.n	8001062 <timerRun+0x46>
		if (timer_counter[i] >= 0) {
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <timerRun+0x58>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db13      	blt.n	800105c <timerRun+0x40>
			timer_counter[i]--;
 8001034:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <timerRun+0x58>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103c:	1e5a      	subs	r2, r3, #1
 800103e:	490d      	ldr	r1, [pc, #52]	; (8001074 <timerRun+0x58>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] == 0) timer_flag[i] = 1;
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <timerRun+0x58>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <timerRun+0x40>
 8001052:	4a09      	ldr	r2, [pc, #36]	; (8001078 <timerRun+0x5c>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2101      	movs	r1, #1
 8001058:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_TIME; i++) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3301      	adds	r3, #1
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b03      	cmp	r3, #3
 8001066:	dddf      	ble.n	8001028 <timerRun+0xc>
		}
	}
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	200000c0 	.word	0x200000c0
 8001078:	200000d0 	.word	0x200000d0

0800107c <getTimerFlag>:

int getTimerFlag(int idx) {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	if (idx < NUM_TIME) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b03      	cmp	r3, #3
 8001088:	dc04      	bgt.n	8001094 <getTimerFlag+0x18>
		return timer_flag[idx];
 800108a:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <getTimerFlag+0x28>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	e001      	b.n	8001098 <getTimerFlag+0x1c>
	}
	return TIMER_INACTIVE; // Xay ra loi
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200000d0 	.word	0x200000d0

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_MspInit+0x5c>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <HAL_MspInit+0x5c>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_MspInit+0x5c>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_MspInit+0x5c>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_MspInit+0x5c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_MspInit+0x5c>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_MspInit+0x60>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_MspInit+0x60>)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000

0800110c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800111c:	d113      	bne.n	8001146 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_TIM_Base_MspInit+0x44>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <HAL_TIM_Base_MspInit+0x44>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_TIM_Base_MspInit+0x44>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	201c      	movs	r0, #28
 800113c:	f000 f9a1 	bl	8001482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001140:	201c      	movs	r0, #28
 8001142:	f000 f9ba 	bl	80014ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <NMI_Handler+0x4>

0800115a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <MemManage_Handler+0x4>

08001166 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <UsageFault_Handler+0x4>

08001172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119a:	f000 f87f 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
	...

080011a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <TIM2_IRQHandler+0x10>)
 80011aa:	f000 ffc3 	bl	8002134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000078 	.word	0x20000078

080011b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c4:	f7ff fff8 	bl	80011b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480b      	ldr	r0, [pc, #44]	; (80011f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ca:	490c      	ldr	r1, [pc, #48]	; (80011fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011cc:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011e0:	4c09      	ldr	r4, [pc, #36]	; (8001208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f001 fae1 	bl	80027b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011f2:	f7ff fdcd 	bl	8000d90 <main>
  bx lr
 80011f6:	4770      	bx	lr
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001200:	08002850 	.word	0x08002850
  ldr r2, =_sbss
 8001204:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001208:	200000e4 	.word	0x200000e4

0800120c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC1_2_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_Init+0x28>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_Init+0x28>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 f923 	bl	800146c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001226:	200f      	movs	r0, #15
 8001228:	f000 f808 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800122c:	f7ff ff3c 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40022000 	.word	0x40022000

0800123c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x54>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x58>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f93b 	bl	80014d6 <HAL_SYSTICK_Config>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00e      	b.n	8001288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d80a      	bhi.n	8001286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f000 f903 	bl	8001482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <HAL_InitTick+0x5c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000014 	.word	0x20000014
 8001294:	2000001c 	.word	0x2000001c
 8001298:	20000018 	.word	0x20000018

0800129c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_IncTick+0x1c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <HAL_IncTick+0x20>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a03      	ldr	r2, [pc, #12]	; (80012bc <HAL_IncTick+0x20>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	2000001c 	.word	0x2000001c
 80012bc:	200000e0 	.word	0x200000e0

080012c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b02      	ldr	r3, [pc, #8]	; (80012d0 <HAL_GetTick+0x10>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	200000e0 	.word	0x200000e0

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4906      	ldr	r1, [pc, #24]	; (800136c <__NVIC_EnableIRQ+0x34>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001438:	d301      	bcc.n	800143e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143a:	2301      	movs	r3, #1
 800143c:	e00f      	b.n	800145e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <SysTick_Config+0x40>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001446:	210f      	movs	r1, #15
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff ff90 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <SysTick_Config+0x40>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Config+0x40>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff2d 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001494:	f7ff ff42 	bl	800131c <__NVIC_GetPriorityGrouping>
 8001498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	6978      	ldr	r0, [r7, #20]
 80014a0:	f7ff ff90 	bl	80013c4 <NVIC_EncodePriority>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014aa:	4611      	mov	r1, r2
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff5f 	bl	8001370 <__NVIC_SetPriority>
}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff35 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffa2 	bl	8001428 <SysTick_Config>
 80014e4:	4603      	mov	r3, r0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b08b      	sub	sp, #44	; 0x2c
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	e148      	b.n	8001796 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001504:	2201      	movs	r2, #1
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	69fa      	ldr	r2, [r7, #28]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	429a      	cmp	r2, r3
 800151e:	f040 8137 	bne.w	8001790 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4aa3      	ldr	r2, [pc, #652]	; (80017b4 <HAL_GPIO_Init+0x2c4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d05e      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 800152c:	4aa1      	ldr	r2, [pc, #644]	; (80017b4 <HAL_GPIO_Init+0x2c4>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d875      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 8001532:	4aa1      	ldr	r2, [pc, #644]	; (80017b8 <HAL_GPIO_Init+0x2c8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d058      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 8001538:	4a9f      	ldr	r2, [pc, #636]	; (80017b8 <HAL_GPIO_Init+0x2c8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d86f      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 800153e:	4a9f      	ldr	r2, [pc, #636]	; (80017bc <HAL_GPIO_Init+0x2cc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d052      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 8001544:	4a9d      	ldr	r2, [pc, #628]	; (80017bc <HAL_GPIO_Init+0x2cc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d869      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 800154a:	4a9d      	ldr	r2, [pc, #628]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d04c      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 8001550:	4a9b      	ldr	r2, [pc, #620]	; (80017c0 <HAL_GPIO_Init+0x2d0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d863      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 8001556:	4a9b      	ldr	r2, [pc, #620]	; (80017c4 <HAL_GPIO_Init+0x2d4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d046      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
 800155c:	4a99      	ldr	r2, [pc, #612]	; (80017c4 <HAL_GPIO_Init+0x2d4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d85d      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 8001562:	2b12      	cmp	r3, #18
 8001564:	d82a      	bhi.n	80015bc <HAL_GPIO_Init+0xcc>
 8001566:	2b12      	cmp	r3, #18
 8001568:	d859      	bhi.n	800161e <HAL_GPIO_Init+0x12e>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <HAL_GPIO_Init+0x80>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015c5 	.word	0x080015c5
 8001578:	080015d7 	.word	0x080015d7
 800157c:	08001619 	.word	0x08001619
 8001580:	0800161f 	.word	0x0800161f
 8001584:	0800161f 	.word	0x0800161f
 8001588:	0800161f 	.word	0x0800161f
 800158c:	0800161f 	.word	0x0800161f
 8001590:	0800161f 	.word	0x0800161f
 8001594:	0800161f 	.word	0x0800161f
 8001598:	0800161f 	.word	0x0800161f
 800159c:	0800161f 	.word	0x0800161f
 80015a0:	0800161f 	.word	0x0800161f
 80015a4:	0800161f 	.word	0x0800161f
 80015a8:	0800161f 	.word	0x0800161f
 80015ac:	0800161f 	.word	0x0800161f
 80015b0:	0800161f 	.word	0x0800161f
 80015b4:	080015cd 	.word	0x080015cd
 80015b8:	080015e1 	.word	0x080015e1
 80015bc:	4a82      	ldr	r2, [pc, #520]	; (80017c8 <HAL_GPIO_Init+0x2d8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015c2:	e02c      	b.n	800161e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	623b      	str	r3, [r7, #32]
          break;
 80015ca:	e029      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	3304      	adds	r3, #4
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	e024      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	3308      	adds	r3, #8
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e01f      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	330c      	adds	r3, #12
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e01a      	b.n	8001620 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015f2:	2304      	movs	r3, #4
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e013      	b.n	8001620 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001600:	2308      	movs	r3, #8
 8001602:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	611a      	str	r2, [r3, #16]
          break;
 800160a:	e009      	b.n	8001620 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800160c:	2308      	movs	r3, #8
 800160e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	615a      	str	r2, [r3, #20]
          break;
 8001616:	e003      	b.n	8001620 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
          break;
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x130>
          break;
 800161e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2bff      	cmp	r3, #255	; 0xff
 8001624:	d801      	bhi.n	800162a <HAL_GPIO_Init+0x13a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	e001      	b.n	800162e <HAL_GPIO_Init+0x13e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3304      	adds	r3, #4
 800162e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2bff      	cmp	r3, #255	; 0xff
 8001634:	d802      	bhi.n	800163c <HAL_GPIO_Init+0x14c>
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	e002      	b.n	8001642 <HAL_GPIO_Init+0x152>
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	3b08      	subs	r3, #8
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	210f      	movs	r1, #15
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	401a      	ands	r2, r3
 8001654:	6a39      	ldr	r1, [r7, #32]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	431a      	orrs	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8090 	beq.w	8001790 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001670:	4b56      	ldr	r3, [pc, #344]	; (80017cc <HAL_GPIO_Init+0x2dc>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a55      	ldr	r2, [pc, #340]	; (80017cc <HAL_GPIO_Init+0x2dc>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_GPIO_Init+0x2dc>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001688:	4a51      	ldr	r2, [pc, #324]	; (80017d0 <HAL_GPIO_Init+0x2e0>)
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a49      	ldr	r2, [pc, #292]	; (80017d4 <HAL_GPIO_Init+0x2e4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d00d      	beq.n	80016d0 <HAL_GPIO_Init+0x1e0>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a48      	ldr	r2, [pc, #288]	; (80017d8 <HAL_GPIO_Init+0x2e8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d007      	beq.n	80016cc <HAL_GPIO_Init+0x1dc>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a47      	ldr	r2, [pc, #284]	; (80017dc <HAL_GPIO_Init+0x2ec>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d101      	bne.n	80016c8 <HAL_GPIO_Init+0x1d8>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e004      	b.n	80016d2 <HAL_GPIO_Init+0x1e2>
 80016c8:	2303      	movs	r3, #3
 80016ca:	e002      	b.n	80016d2 <HAL_GPIO_Init+0x1e2>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_GPIO_Init+0x1e2>
 80016d0:	2300      	movs	r3, #0
 80016d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d4:	f002 0203 	and.w	r2, r2, #3
 80016d8:	0092      	lsls	r2, r2, #2
 80016da:	4093      	lsls	r3, r2
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016e2:	493b      	ldr	r1, [pc, #236]	; (80017d0 <HAL_GPIO_Init+0x2e0>)
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3302      	adds	r3, #2
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	4937      	ldr	r1, [pc, #220]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800170a:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	43db      	mvns	r3, r3
 8001712:	4933      	ldr	r1, [pc, #204]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001714:	4013      	ands	r3, r2
 8001716:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	492d      	ldr	r1, [pc, #180]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	60cb      	str	r3, [r1, #12]
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001732:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	43db      	mvns	r3, r3
 800173a:	4929      	ldr	r1, [pc, #164]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800173c:	4013      	ands	r3, r2
 800173e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4923      	ldr	r1, [pc, #140]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	43db      	mvns	r3, r3
 8001762:	491f      	ldr	r1, [pc, #124]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001764:	4013      	ands	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4919      	ldr	r1, [pc, #100]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	43db      	mvns	r3, r3
 800178a:	4915      	ldr	r1, [pc, #84]	; (80017e0 <HAL_GPIO_Init+0x2f0>)
 800178c:	4013      	ands	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	3301      	adds	r3, #1
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f47f aeaf 	bne.w	8001504 <HAL_GPIO_Init+0x14>
  }
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	372c      	adds	r7, #44	; 0x2c
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	10320000 	.word	0x10320000
 80017b8:	10310000 	.word	0x10310000
 80017bc:	10220000 	.word	0x10220000
 80017c0:	10210000 	.word	0x10210000
 80017c4:	10120000 	.word	0x10120000
 80017c8:	10110000 	.word	0x10110000
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40010800 	.word	0x40010800
 80017d8:	40010c00 	.word	0x40010c00
 80017dc:	40011000 	.word	0x40011000
 80017e0:	40010400 	.word	0x40010400

080017e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e001      	b.n	8001806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	460b      	mov	r3, r1
 800181c:	807b      	strh	r3, [r7, #2]
 800181e:	4613      	mov	r3, r2
 8001820:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001822:	787b      	ldrb	r3, [r7, #1]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001828:	887a      	ldrh	r2, [r7, #2]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800182e:	e003      	b.n	8001838 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	041a      	lsls	r2, r3, #16
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	611a      	str	r2, [r3, #16]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
	...

08001844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e26c      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8087 	beq.w	8001972 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001864:	4b92      	ldr	r3, [pc, #584]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b04      	cmp	r3, #4
 800186e:	d00c      	beq.n	800188a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001870:	4b8f      	ldr	r3, [pc, #572]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 030c 	and.w	r3, r3, #12
 8001878:	2b08      	cmp	r3, #8
 800187a:	d112      	bne.n	80018a2 <HAL_RCC_OscConfig+0x5e>
 800187c:	4b8c      	ldr	r3, [pc, #560]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001888:	d10b      	bne.n	80018a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188a:	4b89      	ldr	r3, [pc, #548]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d06c      	beq.n	8001970 <HAL_RCC_OscConfig+0x12c>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d168      	bne.n	8001970 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e246      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x76>
 80018ac:	4b80      	ldr	r3, [pc, #512]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a7f      	ldr	r2, [pc, #508]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	e02e      	b.n	8001918 <HAL_RCC_OscConfig+0xd4>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x98>
 80018c2:	4b7b      	ldr	r3, [pc, #492]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a7a      	ldr	r2, [pc, #488]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b78      	ldr	r3, [pc, #480]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a77      	ldr	r2, [pc, #476]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e01d      	b.n	8001918 <HAL_RCC_OscConfig+0xd4>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0xbc>
 80018e6:	4b72      	ldr	r3, [pc, #456]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a71      	ldr	r2, [pc, #452]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b6f      	ldr	r3, [pc, #444]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a6e      	ldr	r2, [pc, #440]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0xd4>
 8001900:	4b6b      	ldr	r3, [pc, #428]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a6a      	ldr	r2, [pc, #424]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 8001906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a67      	ldr	r2, [pc, #412]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001916:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fcce 	bl	80012c0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fcca 	bl	80012c0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e1fa      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0xe4>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fcba 	bl	80012c0 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fcb6 	bl	80012c0 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1e6      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x10c>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d063      	beq.n	8001a46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800197e:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800198a:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b08      	cmp	r3, #8
 8001994:	d11c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x18c>
 8001996:	4b46      	ldr	r3, [pc, #280]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d116      	bne.n	80019d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x176>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e1ba      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4939      	ldr	r1, [pc, #228]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	e03a      	b.n	8001a46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d8:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <HAL_RCC_OscConfig+0x270>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7ff fc6f 	bl	80012c0 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff fc6b 	bl	80012c0 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e19b      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4927      	ldr	r1, [pc, #156]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e015      	b.n	8001a46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fc4e 	bl	80012c0 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a28:	f7ff fc4a 	bl	80012c0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e17a      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d03a      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d019      	beq.n	8001a8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a60:	f7ff fc2e 	bl	80012c0 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff fc2a 	bl	80012c0 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e15a      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a86:	2001      	movs	r0, #1
 8001a88:	f000 fa9a 	bl	8001fc0 <RCC_Delay>
 8001a8c:	e01c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a94:	f7ff fc14 	bl	80012c0 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9a:	e00f      	b.n	8001abc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9c:	f7ff fc10 	bl	80012c0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d908      	bls.n	8001abc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e140      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	42420000 	.word	0x42420000
 8001ab8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001abc:	4b9e      	ldr	r3, [pc, #632]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1e9      	bne.n	8001a9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80a6 	beq.w	8001c22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ada:	4b97      	ldr	r3, [pc, #604]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10d      	bne.n	8001b02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4b94      	ldr	r3, [pc, #592]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4a93      	ldr	r2, [pc, #588]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af0:	61d3      	str	r3, [r2, #28]
 8001af2:	4b91      	ldr	r3, [pc, #580]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afe:	2301      	movs	r3, #1
 8001b00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b02:	4b8e      	ldr	r3, [pc, #568]	; (8001d3c <HAL_RCC_OscConfig+0x4f8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d118      	bne.n	8001b40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0e:	4b8b      	ldr	r3, [pc, #556]	; (8001d3c <HAL_RCC_OscConfig+0x4f8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a8a      	ldr	r2, [pc, #552]	; (8001d3c <HAL_RCC_OscConfig+0x4f8>)
 8001b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1a:	f7ff fbd1 	bl	80012c0 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b22:	f7ff fbcd 	bl	80012c0 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b64      	cmp	r3, #100	; 0x64
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0fd      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	4b81      	ldr	r3, [pc, #516]	; (8001d3c <HAL_RCC_OscConfig+0x4f8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x312>
 8001b48:	4b7b      	ldr	r3, [pc, #492]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a7a      	ldr	r2, [pc, #488]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	e02d      	b.n	8001bb2 <HAL_RCC_OscConfig+0x36e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x334>
 8001b5e:	4b76      	ldr	r3, [pc, #472]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4a75      	ldr	r2, [pc, #468]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6213      	str	r3, [r2, #32]
 8001b6a:	4b73      	ldr	r3, [pc, #460]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a72      	ldr	r2, [pc, #456]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6213      	str	r3, [r2, #32]
 8001b76:	e01c      	b.n	8001bb2 <HAL_RCC_OscConfig+0x36e>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	d10c      	bne.n	8001b9a <HAL_RCC_OscConfig+0x356>
 8001b80:	4b6d      	ldr	r3, [pc, #436]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4a6c      	ldr	r2, [pc, #432]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	6213      	str	r3, [r2, #32]
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4a69      	ldr	r2, [pc, #420]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	f043 0301 	orr.w	r3, r3, #1
 8001b96:	6213      	str	r3, [r2, #32]
 8001b98:	e00b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x36e>
 8001b9a:	4b67      	ldr	r3, [pc, #412]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4a66      	ldr	r2, [pc, #408]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6213      	str	r3, [r2, #32]
 8001ba6:	4b64      	ldr	r3, [pc, #400]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a63      	ldr	r2, [pc, #396]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d015      	beq.n	8001be6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bba:	f7ff fb81 	bl	80012c0 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7ff fb7d 	bl	80012c0 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0ab      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd8:	4b57      	ldr	r3, [pc, #348]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0ee      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x37e>
 8001be4:	e014      	b.n	8001c10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7ff fb6b 	bl	80012c0 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fb67 	bl	80012c0 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e095      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c04:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1ee      	bne.n	8001bee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d105      	bne.n	8001c22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c16:	4b48      	ldr	r3, [pc, #288]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4a47      	ldr	r2, [pc, #284]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8081 	beq.w	8001d2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c2c:	4b42      	ldr	r3, [pc, #264]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b08      	cmp	r3, #8
 8001c36:	d061      	beq.n	8001cfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d146      	bne.n	8001cce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c40:	4b3f      	ldr	r3, [pc, #252]	; (8001d40 <HAL_RCC_OscConfig+0x4fc>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7ff fb3b 	bl	80012c0 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7ff fb37 	bl	80012c0 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e067      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c60:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c74:	d108      	bne.n	8001c88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	492d      	ldr	r1, [pc, #180]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c88:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a19      	ldr	r1, [r3, #32]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	4927      	ldr	r1, [pc, #156]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca0:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <HAL_RCC_OscConfig+0x4fc>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fb0b 	bl	80012c0 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cae:	f7ff fb07 	bl	80012c0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e037      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x46a>
 8001ccc:	e02f      	b.n	8001d2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <HAL_RCC_OscConfig+0x4fc>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff faf4 	bl	80012c0 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff faf0 	bl	80012c0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e020      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x498>
 8001cfa:	e018      	b.n	8001d2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e013      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d106      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40007000 	.word	0x40007000
 8001d40:	42420060 	.word	0x42420060

08001d44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0d0      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b6a      	ldr	r3, [pc, #424]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d910      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b67      	ldr	r3, [pc, #412]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 0207 	bic.w	r2, r3, #7
 8001d6e:	4965      	ldr	r1, [pc, #404]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b63      	ldr	r3, [pc, #396]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0b8      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da0:	4b59      	ldr	r3, [pc, #356]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4a58      	ldr	r2, [pc, #352]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001daa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db8:	4b53      	ldr	r3, [pc, #332]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a52      	ldr	r2, [pc, #328]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc4:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	494d      	ldr	r1, [pc, #308]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d040      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d115      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e07f      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e02:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e073      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e12:	4b3d      	ldr	r3, [pc, #244]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e06b      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e22:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f023 0203 	bic.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4936      	ldr	r1, [pc, #216]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e34:	f7ff fa44 	bl	80012c0 <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	e00a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e3c:	f7ff fa40 	bl	80012c0 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e053      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 020c 	and.w	r2, r3, #12
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1eb      	bne.n	8001e3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d210      	bcs.n	8001e94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 0207 	bic.w	r2, r3, #7
 8001e7a:	4922      	ldr	r1, [pc, #136]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e032      	b.n	8001efa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea0:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4916      	ldr	r1, [pc, #88]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	490e      	ldr	r1, [pc, #56]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ed2:	f000 f821 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	490a      	ldr	r1, [pc, #40]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ee4:	5ccb      	ldrb	r3, [r1, r3]
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x1cc>)
 8001eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_RCC_ClockConfig+0x1d0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f9a2 	bl	800123c <HAL_InitTick>

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08002824 	.word	0x08002824
 8001f10:	20000014 	.word	0x20000014
 8001f14:	20000018 	.word	0x20000018

08001f18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <HAL_RCC_GetSysClockFreq+0x94>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0x30>
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d003      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x36>
 8001f46:	e027      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f4a:	613b      	str	r3, [r7, #16]
      break;
 8001f4c:	e027      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	0c9b      	lsrs	r3, r3, #18
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d010      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_RCC_GetSysClockFreq+0x94>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	0c5b      	lsrs	r3, r3, #17
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f7a:	fb02 f203 	mul.w	r2, r2, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e004      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	613b      	str	r3, [r7, #16]
      break;
 8001f96:	e002      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f9a:	613b      	str	r3, [r7, #16]
      break;
 8001f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9e:	693b      	ldr	r3, [r7, #16]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	007a1200 	.word	0x007a1200
 8001fb4:	08002834 	.word	0x08002834
 8001fb8:	08002844 	.word	0x08002844
 8001fbc:	003d0900 	.word	0x003d0900

08001fc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <RCC_Delay+0x34>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <RCC_Delay+0x38>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0a5b      	lsrs	r3, r3, #9
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fdc:	bf00      	nop
  }
  while (Delay --);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e5a      	subs	r2, r3, #1
 8001fe2:	60fa      	str	r2, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f9      	bne.n	8001fdc <RCC_Delay+0x1c>
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	20000014 	.word	0x20000014
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e041      	b.n	8002092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff f872 	bl	800110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3304      	adds	r3, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4610      	mov	r0, r2
 800203c:	f000 fa56 	bl	80024ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d001      	beq.n	80020b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e035      	b.n	8002120 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a16      	ldr	r2, [pc, #88]	; (800212c <HAL_TIM_Base_Start_IT+0x90>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d009      	beq.n	80020ea <HAL_TIM_Base_Start_IT+0x4e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020de:	d004      	beq.n	80020ea <HAL_TIM_Base_Start_IT+0x4e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a12      	ldr	r2, [pc, #72]	; (8002130 <HAL_TIM_Base_Start_IT+0x94>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d111      	bne.n	800210e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2b06      	cmp	r3, #6
 80020fa:	d010      	beq.n	800211e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210c:	e007      	b.n	800211e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f042 0201 	orr.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40012c00 	.word	0x40012c00
 8002130:	40000400 	.word	0x40000400

08002134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d020      	beq.n	8002198 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01b      	beq.n	8002198 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0202 	mvn.w	r2, #2
 8002168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f998 	bl	80024b4 <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f98b 	bl	80024a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f99a 	bl	80024c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d020      	beq.n	80021e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01b      	beq.n	80021e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0204 	mvn.w	r2, #4
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f972 	bl	80024b4 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f965 	bl	80024a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f974 	bl	80024c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d020      	beq.n	8002230 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01b      	beq.n	8002230 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0208 	mvn.w	r2, #8
 8002200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2204      	movs	r2, #4
 8002206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f94c 	bl	80024b4 <HAL_TIM_IC_CaptureCallback>
 800221c:	e005      	b.n	800222a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f93f 	bl	80024a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f94e 	bl	80024c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d020      	beq.n	800227c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01b      	beq.n	800227c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0210 	mvn.w	r2, #16
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2208      	movs	r2, #8
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f926 	bl	80024b4 <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f919 	bl	80024a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f928 	bl	80024c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00c      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0201 	mvn.w	r2, #1
 8002298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fe fe88 	bl	8000fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00c      	beq.n	80022c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fa6f 	bl	80027a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00c      	beq.n	80022e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f8f8 	bl	80024d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00c      	beq.n	800230c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0220 	mvn.w	r2, #32
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fa42 	bl	8002790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_TIM_ConfigClockSource+0x1c>
 800232c:	2302      	movs	r3, #2
 800232e:	e0b4      	b.n	800249a <HAL_TIM_ConfigClockSource+0x186>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800234e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002368:	d03e      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0xd4>
 800236a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800236e:	f200 8087 	bhi.w	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002376:	f000 8086 	beq.w	8002486 <HAL_TIM_ConfigClockSource+0x172>
 800237a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237e:	d87f      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002380:	2b70      	cmp	r3, #112	; 0x70
 8002382:	d01a      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0xa6>
 8002384:	2b70      	cmp	r3, #112	; 0x70
 8002386:	d87b      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002388:	2b60      	cmp	r3, #96	; 0x60
 800238a:	d050      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x11a>
 800238c:	2b60      	cmp	r3, #96	; 0x60
 800238e:	d877      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002390:	2b50      	cmp	r3, #80	; 0x50
 8002392:	d03c      	beq.n	800240e <HAL_TIM_ConfigClockSource+0xfa>
 8002394:	2b50      	cmp	r3, #80	; 0x50
 8002396:	d873      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d058      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x13a>
 800239c:	2b40      	cmp	r3, #64	; 0x40
 800239e:	d86f      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 80023a0:	2b30      	cmp	r3, #48	; 0x30
 80023a2:	d064      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x15a>
 80023a4:	2b30      	cmp	r3, #48	; 0x30
 80023a6:	d86b      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d060      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x15a>
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d867      	bhi.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d05c      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x15a>
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d05a      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x15a>
 80023b8:	e062      	b.n	8002480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f000 f96a 	bl	80026a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	609a      	str	r2, [r3, #8]
      break;
 80023e6:	e04f      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6899      	ldr	r1, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f000 f953 	bl	80026a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800240a:	609a      	str	r2, [r3, #8]
      break;
 800240c:	e03c      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	f000 f8ca 	bl	80025b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2150      	movs	r1, #80	; 0x50
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f921 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 800242c:	e02c      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	461a      	mov	r2, r3
 800243c:	f000 f8e8 	bl	8002610 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2160      	movs	r1, #96	; 0x60
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f911 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 800244c:	e01c      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	461a      	mov	r2, r3
 800245c:	f000 f8aa 	bl	80025b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2140      	movs	r1, #64	; 0x40
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f901 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 800246c:	e00c      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	4610      	mov	r0, r2
 800247a:	f000 f8f8 	bl	800266e <TIM_ITRx_SetConfig>
      break;
 800247e:	e003      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      break;
 8002484:	e000      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
	...

080024ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a2b      	ldr	r2, [pc, #172]	; (80025ac <TIM_Base_SetConfig+0xc0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d007      	beq.n	8002514 <TIM_Base_SetConfig+0x28>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d003      	beq.n	8002514 <TIM_Base_SetConfig+0x28>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <TIM_Base_SetConfig+0xc4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d108      	bne.n	8002526 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a20      	ldr	r2, [pc, #128]	; (80025ac <TIM_Base_SetConfig+0xc0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <TIM_Base_SetConfig+0x52>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d003      	beq.n	800253e <TIM_Base_SetConfig+0x52>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <TIM_Base_SetConfig+0xc4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d108      	bne.n	8002550 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <TIM_Base_SetConfig+0xc0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d103      	bne.n	8002584 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f023 0201 	bic.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	611a      	str	r2, [r3, #16]
  }
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	40012c00 	.word	0x40012c00
 80025b0:	40000400 	.word	0x40000400

080025b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f023 0201 	bic.w	r2, r3, #1
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f023 030a 	bic.w	r3, r3, #10
 80025f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	621a      	str	r2, [r3, #32]
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	f023 0210 	bic.w	r2, r3, #16
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800263a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	031b      	lsls	r3, r3, #12
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800264c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	621a      	str	r2, [r3, #32]
}
 8002664:	bf00      	nop
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	f043 0307 	orr.w	r3, r3, #7
 8002690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	609a      	str	r2, [r3, #8]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr

080026a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b087      	sub	sp, #28
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
 80026ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	021a      	lsls	r2, r3, #8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	609a      	str	r2, [r3, #8]
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e041      	b.n	800277c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a14      	ldr	r2, [pc, #80]	; (8002788 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d004      	beq.n	8002750 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d10c      	bne.n	800276a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002756:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	4313      	orrs	r3, r2
 8002760:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40000400 	.word	0x40000400

08002790 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <__libc_init_array>:
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	2600      	movs	r6, #0
 80027b8:	4d0c      	ldr	r5, [pc, #48]	; (80027ec <__libc_init_array+0x38>)
 80027ba:	4c0d      	ldr	r4, [pc, #52]	; (80027f0 <__libc_init_array+0x3c>)
 80027bc:	1b64      	subs	r4, r4, r5
 80027be:	10a4      	asrs	r4, r4, #2
 80027c0:	42a6      	cmp	r6, r4
 80027c2:	d109      	bne.n	80027d8 <__libc_init_array+0x24>
 80027c4:	f000 f822 	bl	800280c <_init>
 80027c8:	2600      	movs	r6, #0
 80027ca:	4d0a      	ldr	r5, [pc, #40]	; (80027f4 <__libc_init_array+0x40>)
 80027cc:	4c0a      	ldr	r4, [pc, #40]	; (80027f8 <__libc_init_array+0x44>)
 80027ce:	1b64      	subs	r4, r4, r5
 80027d0:	10a4      	asrs	r4, r4, #2
 80027d2:	42a6      	cmp	r6, r4
 80027d4:	d105      	bne.n	80027e2 <__libc_init_array+0x2e>
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
 80027d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027dc:	4798      	blx	r3
 80027de:	3601      	adds	r6, #1
 80027e0:	e7ee      	b.n	80027c0 <__libc_init_array+0xc>
 80027e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e6:	4798      	blx	r3
 80027e8:	3601      	adds	r6, #1
 80027ea:	e7f2      	b.n	80027d2 <__libc_init_array+0x1e>
 80027ec:	08002848 	.word	0x08002848
 80027f0:	08002848 	.word	0x08002848
 80027f4:	08002848 	.word	0x08002848
 80027f8:	0800284c 	.word	0x0800284c

080027fc <memset>:
 80027fc:	4603      	mov	r3, r0
 80027fe:	4402      	add	r2, r0
 8002800:	4293      	cmp	r3, r2
 8002802:	d100      	bne.n	8002806 <memset+0xa>
 8002804:	4770      	bx	lr
 8002806:	f803 1b01 	strb.w	r1, [r3], #1
 800280a:	e7f9      	b.n	8002800 <memset+0x4>

0800280c <_init>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr

08002818 <_fini>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr
